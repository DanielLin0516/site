(self.webpackChunksite=self.webpackChunksite||[]).push([[3812],{1258:(e,s,n)=>{"use strict";n.r(s),n.d(s,{data:()=>a});const a={key:"v-d0a1cb9a",path:"/guide/basic/structure.html",title:"目录结构",lang:"zh-CN",frontmatter:{title:"目录结构",order:1},excerpt:"",headers:[{level:2,title:".ice/",slug:"ice",children:[]},{level:2,title:"build/",slug:"build",children:[]},{level:2,title:"mock/",slug:"mock",children:[]},{level:2,title:"public/",slug:"public",children:[]},{level:2,title:"src/",slug:"src",children:[{level:3,title:"components/",slug:"components",children:[]},{level:3,title:"layouts/",slug:"layouts",children:[]},{level:3,title:"models/",slug:"models",children:[]},{level:3,title:"pages/",slug:"pages",children:[]},{level:3,title:"app.ts",slug:"app-ts",children:[]},{level:3,title:"config.ts",slug:"config-ts",children:[]},{level:3,title:"global.scss",slug:"global-scss",children:[]},{level:3,title:"routes.ts",slug:"routes-ts",children:[]}]},{level:2,title:"build.json",slug:"build-json",children:[]},{level:2,title:"package.json",slug:"package-json",children:[]},{level:2,title:"tsconfig.json",slug:"tsconfig-json",children:[]}],filePathRelative:"guide/basic/structure.md",git:{updatedTime:1621352433e3,contributors:[]}}},9170:(e,s,n)=>{"use strict";n.r(s),n.d(s,{default:()=>z});var a=n(6252);const l=(0,a.uE)('<p>icejs 的默认应用目录架构提供了良好的代码分层结构，适用于开发或大或小的应用，约定的目录结构如下：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>├── .ice/                          # 运行时生成的临时目录\n├── build/                         # 构建产物目录\n├── mock/                          # 本地模拟数据\n│   ├── index.js\n├── public/\n│   ├── index.html                 # 应用入口 HTML\n│   └── favicon.png                # Favicon\n├── src/                           # 源码\n│   ├── components/                # 自定义业务组件\n│   ├── layouts/                   # 布局组件\n│   ├── pages/                     # 页面\n│   ├── models/                    # 应用级数据状态\n│   ├── global.scss                # 全局样式\n│   ├── config.ts                  # 环境配置\n│   ├── routes.ts                  # 路由配置\n│   └── app.ts                     # 应用入口\n├── build.json\n├── package.json\n└── tsconfig.json\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="ice"><a class="header-anchor" href="#ice">#</a> .ice/</h2><p>运行 icejs 项目时默认生成的临时目录，该目录不需要进行 git 提交。</p><h2 id="build"><a class="header-anchor" href="#build">#</a> build/</h2><p>运行 <code>npm run build</code> 后的构建产物目录。</p><h2 id="mock"><a class="header-anchor" href="#mock">#</a> mock/</h2>',7),r=(0,a.Uk)("本地模拟数据的目录。"),c={href:"/docs/guide/advance/mock",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("详见"),o=(0,a.uE)('<h2 id="public"><a class="header-anchor" href="#public">#</a> public/</h2><p>静态资源目录，默认包含 <code>index.html</code> 和 <code>favicon.png</code>。</p><h2 id="src"><a class="header-anchor" href="#src">#</a> src/</h2><p>源码目录</p><h3 id="components"><a class="header-anchor" href="#components">#</a> components/</h3><p>项目通用的组件目录，推荐的目录形式如下：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>Guide/\n  ├── index.tsx\n  ├── index.module.scss\n  └── <span class="token bold"><span class="token punctuation">__</span><span class="token content">tests</span><span class="token punctuation">__</span></span>          # 就近测试用例\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="layouts"><a class="header-anchor" href="#layouts">#</a> layouts/</h3><p>项目的布局文件目录，布局通常包含导航配置，布局组件，样式三部分，推荐的目录形式如下：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>BasicLayout/\n  ├── menuConfig.ts      # 布局对应的菜单配置\n  ├── index.tsx\n  └── index.module.scss\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="models"><a class="header-anchor" href="#models">#</a> models/</h3>',11),d=(0,a.Uk)("项目的全局数据模型目录，通常包含多个 model 文件，推荐的目录形式如下。"),p={href:"/docs/guide/basic/store",target:"_blank",rel:"noopener noreferrer"},t=(0,a.Uk)("详见"),u=(0,a.uE)('<div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>models/\n  ├── foo.ts\n  └── bar.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="pages"><a class="header-anchor" href="#pages">#</a> pages/</h3><p>项目的页面文件目录，页面通常包含数据模型，页面组件、样式三部分，推荐的目录形式如下。</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>Home/                    # Home 页面\n  ├── model.ts           # 页面级数据状态\n  ├── index.tsx          # 页面入口\n  └── index.module.scss  # 页面样式文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="app-ts"><a class="header-anchor" href="#app-ts">#</a> app.ts</h3>',5),m=(0,a.Uk)("项目的入口文件，用于对应用进行全局配置，包括路由、运行环境、请求、日志等。"),b={href:"/docs/guide/basic/app",target:"_blank",rel:"noopener noreferrer"},h=(0,a.Uk)("详见"),g=(0,a.Wm)("h3",{id:"config-ts"},[(0,a.Wm)("a",{class:"header-anchor",href:"#config-ts"},"#"),(0,a.Uk)(" config.ts")],-1),k=(0,a.Uk)("项目的环境配置，用于根据不同环境进行区分配置。"),f={href:"/docs/guide/basic/config#%E6%A0%B9%E6%8D%AE%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"},v=(0,a.Uk)("详见"),W=(0,a.Wm)("h3",{id:"global-scss"},[(0,a.Wm)("a",{class:"header-anchor",href:"#global-scss"},"#"),(0,a.Uk)(" global.scss")],-1),j=(0,a.Uk)("全局的样式配置，框架默认会引入该文件。"),U={href:"/docs/guide/basic/style",target:"_blank",rel:"noopener noreferrer"},x=(0,a.Uk)("详见"),w=(0,a.Wm)("h3",{id:"routes-ts"},[(0,a.Wm)("a",{class:"header-anchor",href:"#routes-ts"},"#"),(0,a.Uk)(" routes.ts")],-1),E=(0,a.Uk)("应用的路由配置文件。"),_={href:"/docs/guide/basic/router",target:"_blank",rel:"noopener noreferrer"},y=(0,a.Uk)("详见"),A=(0,a.Wm)("h2",{id:"build-json"},[(0,a.Wm)("a",{class:"header-anchor",href:"#build-json"},"#"),(0,a.Uk)(" build.json")],-1),C=(0,a.Uk)("应用的工程配置文件。"),H={href:"/docs/guide/basic/build",target:"_blank",rel:"noopener noreferrer"},B=(0,a.Uk)("详见"),D=(0,a.Wm)("h2",{id:"package-json"},[(0,a.Wm)("a",{class:"header-anchor",href:"#package-json"},"#"),(0,a.Uk)(" package.json")],-1),L=(0,a.Wm)("p",null,"应用所需要的各种模块，以及配置信息（比如名称、版本、许可证等元数据）。",-1),T=(0,a.Wm)("h2",{id:"tsconfig-json"},[(0,a.Wm)("a",{class:"header-anchor",href:"#tsconfig-json"},"#"),(0,a.Uk)(" tsconfig.json")],-1),F=(0,a.Wm)("p",null,"TypeScript 编译所需的配置文件。",-1),z={render:function(e,s){const n=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[l,(0,a.Wm)("p",null,[r,(0,a.Wm)("a",c,[i,(0,a.Wm)(n)])]),o,(0,a.Wm)("p",null,[d,(0,a.Wm)("a",p,[t,(0,a.Wm)(n)])]),u,(0,a.Wm)("p",null,[m,(0,a.Wm)("a",b,[h,(0,a.Wm)(n)])]),g,(0,a.Wm)("p",null,[k,(0,a.Wm)("a",f,[v,(0,a.Wm)(n)])]),W,(0,a.Wm)("p",null,[j,(0,a.Wm)("a",U,[x,(0,a.Wm)(n)])]),w,(0,a.Wm)("p",null,[E,(0,a.Wm)("a",_,[y,(0,a.Wm)(n)])]),A,(0,a.Wm)("p",null,[C,(0,a.Wm)("a",H,[B,(0,a.Wm)(n)])]),D,L,T,F],64)}}}}]);