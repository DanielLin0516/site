(self.webpackChunksite=self.webpackChunksite||[]).push([[2912],{5264:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-3bff75a0",path:"/plugin/develop/build.html",title:"通过插件定制工程能力",lang:"zh-CN",frontmatter:{title:"通过插件定制工程能力",order:2},excerpt:"",headers:[{level:2,title:"插件 API",slug:"插件-api",children:[{level:3,title:"context",slug:"context",children:[]},{level:3,title:"onGetWebpackConfig",slug:"ongetwebpackconfig",children:[]},{level:3,title:"onGetJestConfig",slug:"ongetjestconfig",children:[]},{level:3,title:"onHook",slug:"onhook",children:[]},{level:3,title:"log",slug:"log",children:[]},{level:3,title:"registerUserConfig",slug:"registeruserconfig",children:[]},{level:3,title:"registerClioption",slug:"registerclioption",children:[]},{level:3,title:"registerMethod",slug:"registermethod",children:[]},{level:3,title:"modifyUserConfig",slug:"modifyuserconfig",children:[]},{level:3,title:"registerTask",slug:"registertask",children:[]},{level:3,title:"getAllTask",slug:"getalltask",children:[]},{level:3,title:"getAllPlugin",slug:"getallplugin",children:[]}]},{level:2,title:"扩展 API",slug:"扩展-api",children:[{level:3,title:"addIceExport",slug:"addiceexport",children:[]},{level:3,title:"removeIceExport",slug:"removeiceexport",children:[]},{level:3,title:"addPageExport",slug:"addpageexport",children:[]},{level:3,title:"removePageExport",slug:"removepageexport",children:[]},{level:3,title:"addIceAppConfigTypes",slug:"addiceappconfigtypes",children:[]},{level:3,title:"removeIceAppConfigTypes",slug:"removeiceappconfigtypes",children:[]},{level:3,title:"getPages",slug:"getpages",children:[]},{level:3,title:"watchFileChange",slug:"watchfilechange",children:[]}]},{level:2,title:"插件参数",slug:"插件参数",children:[]},{level:2,title:"插件通信",slug:"插件通信",children:[{level:3,title:"setValue",slug:"setvalue",children:[]},{level:3,title:"getValue",slug:"getvalue",children:[]}]},{level:2,title:"类型",slug:"类型",children:[]}],filePathRelative:"plugin/develop/build.md",git:{updatedTime:1621428598e3,contributors:[]}}},4337:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<p>插件工程能力通过 <code>src/index.ts</code> 定义，结构如下</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context<span class="token punctuation">,</span> onGetWebpackConfig<span class="token punctuation">,</span> log<span class="token punctuation">,</span> onHook<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 第一项参数为插件 API 提供的能力</span>\n  <span class="token comment">// options：插件自定义参数</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>该方法会接收两个参数，第一个参数是插件提供的 API 接口，推荐按照解构方式使用，第二个参数 <code>options</code> 是插件自定义的参数，由插件开发者决定提供哪些选项给用户配置。</p><h2 id="插件-api"><a class="header-anchor" href="#插件-api">#</a> 插件 API</h2><p>通过插件提供的 API，可以方便拓展和自定义能力。</p><h3 id="context"><a class="header-anchor" href="#context">#</a> context</h3><p>包含运行时的各种环境信息：</p><ul><li><code>command</code> 当前运行命令，start/build/test</li><li><code>commandArgs</code> script 命令执行时接受到的参数</li><li><code>rootDir</code> 项目根目录</li><li><code>userConfig</code> 用户在 build.json 中配置的内容</li><li><code>pkg</code> 项目 package.json 中的内容</li></ul><h3 id="ongetwebpackconfig"><a class="header-anchor" href="#ongetwebpackconfig">#</a> onGetWebpackConfig</h3><p>通过 <code>onGetWebpackConfig</code> 获取 webpack-chain 形式的配置，并对配置进行自定义修改：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>onGetWebpackConfig<span class="token punctuation">,</span> registerTask<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> webpackConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">onGetWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="ongetjestconfig"><a class="header-anchor" href="#ongetjestconfig">#</a> onGetJestConfig</h3><p>通过 <code>onGetJestConfig</code> 获取 jest 配置，可对配置进行自定义修改：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>onGetJestConfig<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">onGetJestConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">jestConfig</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> modifiedJestConfig <span class="token operator">=</span> <span class="token function">modify</span><span class="token punctuation">(</span>jestConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> modifiedJestConfig<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="onhook"><a class="header-anchor" href="#onhook">#</a> onHook</h3><p>通过 onHook 监听命令运行时事件，onHook 注册的函数执行完成后才会执行后续操作，可以用于在命令运行中途插入插件想做的操作：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onHook <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n <span class="token function">onHook</span><span class="token punctuation">(</span><span class="token string">&#39;before.build.load&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n   <span class="token comment">// do something before dev</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token function">onHook</span><span class="token punctuation">(</span><span class="token string">&#39;after.build.compile&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n   <span class="token comment">// do something after build</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>目前支持的命令执行生命周期如下：</p><h4 id="start-命令"><a class="header-anchor" href="#start-命令">#</a> start 命令</h4><table><thead><tr><th>生命周期</th><th>参数</th><th>调用时机</th></tr></thead><tbody><tr><td>before.start.load</td><td>{<br>  args: array // 启动参数<br>}</td><td>获取webpack配置之前</td></tr><tr><td>before.start.run</td><td>-</td><td>webpack执行之前</td></tr><tr><td>after.start.compile</td><td>{<br>  url: string // serverUrl，<br>  stats: WebpackAssets<br>}</td><td>编译结束，每次重新编译都会执行</td></tr><tr><td>before.start.devServer</td><td>{<br>  url: string // serverUrl，<br> devServer:  WebpackDevServer<br>}</td><td>中间件加载后，webpack dev server 启动前</td></tr><tr><td>after.start.devServer</td><td>{<br>  url: string // serverUrl,<br>  devServer: WebpackDevServer,<br>  err: Error<br>}</td><td>webpack dev server 启动后</td></tr></tbody></table><h4 id="build-命令"><a class="header-anchor" href="#build-命令">#</a> build 命令</h4><table><thead><tr><th>生命周期</th><th>参数</th><th>调用时机</th></tr></thead><tbody><tr><td>before.build.load</td><td>{<br>  args: array // 启动参数<br>}</td><td>获取 webpack 配置之前</td></tr><tr><td>before.build.run</td><td>-</td><td>webpack 构建执行之前</td></tr><tr><td>after.build.compile</td><td>{<br>  err: Error,<br>  stats: WebpackAssets<br>}</td><td>构建结束</td></tr></tbody></table><h4 id="test-命令"><a class="header-anchor" href="#test-命令">#</a> test 命令</h4><table><thead><tr><th>生命周期</th><th>参数</th><th>调用时机</th></tr></thead><tbody><tr><td>before.test.load</td><td>{<br>  args: array // 启动参数<br>}</td><td>获取 jest 配置之前</td></tr><tr><td>before.test.run</td><td>-</td><td>jest 执行之前</td></tr><tr><td>after.test</td><td>{<br>  result // jest执行结果<br>}</td><td>测试命令执行结束</td></tr></tbody></table><h3 id="log"><a class="header-anchor" href="#log">#</a> log</h3><p>统一的 log 工具，底层使用 <code>npmlog</code> ，便于生成统一格式的 log。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlog<span class="token punctuation">.</span><span class="token function">verbose</span><span class="token punctuation">(</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlog<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="registeruserconfig"><a class="header-anchor" href="#registeruserconfig">#</a> registerUserConfig</h3><p>为用户配置文件 <code>build.json</code> 中添加自定义字段。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>registerUserConfig<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">registerUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;custom-key&#39;</span><span class="token punctuation">,</span>\n    validation<span class="token operator">:</span> <span class="token string">&#39;boolean&#39;</span> <span class="token comment">// 可选，支持类型有 string, number, array, object, boolean</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="registerclioption"><a class="header-anchor" href="#registerclioption">#</a> registerClioption</h3><p>为命令行启动添加自定义参数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>registerClioption<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">registerCliOption</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;custom-option&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 参数名</span>\n    commands<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 命令</span>\n    <span class="token function-variable function">configWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 可选，arg 为命令行参数对应值</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="registermethod"><a class="header-anchor" href="#registermethod">#</a> registerMethod</h3><p>注册自定义方法。通过 <code>applyMethod</code> 调用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>registerMethod<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">registerMethod</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name, func 分别为方法名和方法</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="modifyuserconfig"><a class="header-anchor" href="#modifyuserconfig">#</a> modifyUserConfig</h3><p>修改用户配置文件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>modifyUserConfig<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">modifyUserConfig</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// key, value 分别为用户配置文件键值对</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="registertask"><a class="header-anchor" href="#registertask">#</a> registerTask</h3><p>添加 webpack 配置，配置为 webpack-chain 形式。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>registerTask<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">registerTask</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: Task名, config: webpack-chain 形式的配置</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="getalltask"><a class="header-anchor" href="#getalltask">#</a> getAllTask</h3><p>获取所有 webpack 配置名称。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>getAllTask<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> alltasks <span class="token operator">=</span> <span class="token function">getAlltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="getallplugin"><a class="header-anchor" href="#getallplugin">#</a> getAllPlugin</h3><p>获取所有插件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>getAllPlugin<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取所有插件数组</span>\n  <span class="token comment">// 类型：() =&gt; [{pluginPath, options, name}]</span>\n  <span class="token keyword">const</span> plugins <span class="token operator">=</span> <span class="token function">getAllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ，<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="扩展-api"><a class="header-anchor" href="#扩展-api">#</a> 扩展 API</h2><p>除了以上由 build-scripts 内置支持的 API，我们还通过 icejs 对插件 API 做了扩展，扩展的 API 需要通过以下方式调用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> applyMethod <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 第一个参数对应 API 名称，第二个参数对应 API 参数</span>\n  <span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token string">&#39;addIceExport&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> source<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./config</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> exportName <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>目前扩展的 API 仅支持同步调用。</p><h3 id="addiceexport"><a class="header-anchor" href="#addiceexport">#</a> addIceExport</h3><p>向 <code>ice</code> 里注册模块，实现 <code>import { foo } from &#39;ice&#39;;</code> 的能力：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 实现 import { request } from &#39;ice&#39;; request 由插件的 `./request/request` 文件实现</span>\n<span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token string">&#39;addIceExport&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> source<span class="token operator">:</span> <span class="token string">&#39;./request/request&#39;</span><span class="token punctuation">,</span> exportName<span class="token operator">:</span> <span class="token string">&#39;request&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="removeiceexport"><a class="header-anchor" href="#removeiceexport">#</a> removeIceExport</h3><p>与 <code>addIceExport</code> 对应：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token string">&#39;removeIceExport&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;store&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="addpageexport"><a class="header-anchor" href="#addpageexport">#</a> addPageExport</h3><p>向 <code>ice/Home</code> 里注册模块，实现 <code>import { foo } from &#39;ice/Home&#39;</code>，目前主要用于页面级状态管理的实现：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token string">&#39;addPageExport&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> source<span class="token operator">:</span> <span class="token string">&#39;./models&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;store&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>一般情况下需要循环向每个页面添加。</p><h3 id="removepageexport"><a class="header-anchor" href="#removepageexport">#</a> removePageExport</h3><p>与 <code>addPageExport</code> 对应</p><h3 id="addiceappconfigtypes"><a class="header-anchor" href="#addiceappconfigtypes">#</a> addIceAppConfigTypes</h3><p>向 appConfig 添加类型</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 第一项参数对应 API 名称，第二项参数对应 API 参数。</span>\n<span class="token comment">//</span>\n<span class="token comment">// API 参数：</span>\n<span class="token comment">// source: 类型声明文件。./foo/types，对应 ICE_TEMP_DIR/foo/types。 ICE_TEMP_DIR，可通过 getValue(&#39;TEMP_PATH&#39;) 获得。注意：需先将对应类型文件移至 ICE_TEMP_DIR。</span>\n<span class="token comment">// specifier: 导出类型标识符，可选，默认值为 &#39;*&#39;。</span>\n<span class="token comment">// exportName: 添加至 appConfig 类型 IAppConfig 上的导出名。</span>\n<span class="token comment">//</span>\n<span class="token comment">// 结果为：</span>\n<span class="token comment">// // ICE_TEMP_DIR/types.ts</span>\n<span class="token comment">// import { Foo } from &#39;./foo/types&#39;;</span>\n<span class="token comment">// export interface IAppConfig {</span>\n<span class="token comment">//   foo?: Foo</span>\n<span class="token comment">// }</span>\n<span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token string">&#39;addIceAppConfigTypes&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> source<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./foo/types</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> specifier<span class="token operator">:</span> <span class="token string">&#39;{ Foo }&#39;</span><span class="token punctuation">,</span> exportName<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo?: Foo</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="removeiceappconfigtypes"><a class="header-anchor" href="#removeiceappconfigtypes">#</a> removeIceAppConfigTypes</h3><p>与 <code>addIceAppConfigTypes</code> 对应</p><h3 id="getpages"><a class="header-anchor" href="#getpages">#</a> getPages</h3><p>获取 <code>src/pages</code> 下的一级页面列表：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// [&#39;Home&#39;, &#39;About&#39;]</span>\n<span class="token keyword">const</span> pages <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token string">&#39;getPages&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootDir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="watchfilechange"><a class="header-anchor" href="#watchfilechange">#</a> watchFileChange</h3><p>监听 <code>src</code> 下的文件变化：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token string">&#39;watchFileChange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;src/config.*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">===</span> <span class="token string">&#39;unlink&#39;</span> <span class="token operator">||</span> event <span class="token operator">===</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do something</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="插件参数"><a class="header-anchor" href="#插件参数">#</a> 插件参数</h2><p>用户可以在 <code>build.json</code> 中指定插件参数：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&quot;build-plugin-foo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>那么在 build-plugin-foo 里就可以获取到这个参数：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context<span class="token punctuation">,</span> log <span class="token punctuation">}</span><span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; bar</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="插件通信"><a class="header-anchor" href="#插件通信">#</a> 插件通信</h2><p>插件间需要进行通信的场景诉求：</p><ol><li>不同插件之间需要知道彼此的存在来确定是否执行相应的逻辑</li><li>多个插件共有的配置信息可以抽出来，在某个插件中进行配置</li></ol><p>使用 <code>setValue</code> 和 <code>getValue</code> 两个API来实现，分别用于数据的存取。</p><h3 id="setvalue"><a class="header-anchor" href="#setvalue">#</a> setValue</h3><p>类型：<code>(key: string | number, value: any) =&gt; void</code>，示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// build-plugin-test</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> setValue <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="getvalue"><a class="header-anchor" href="#getvalue">#</a> getValue</h3><p>类型：<code>(key: string | number) =&gt; any</code>，示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>getValue<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>同时在 icejs 中也内置了几个变量：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> projectType <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;PROJECT_TYPE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ts|js</span>\n<span class="token keyword">const</span> iceDirPath <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;TEMP_PATH&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对应 .ice 的路径</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="类型"><a class="header-anchor" href="#类型">#</a> 类型</h2><p>接口类型通过以下方法引入：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> IPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@alib/build-scripts&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',95),p={render:function(n,s){return e}}}}]);