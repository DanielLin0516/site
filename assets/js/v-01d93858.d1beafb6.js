(self.webpackChunksite=self.webpackChunksite||[]).push([[8225],{5081:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-01d93858",path:"/guide/advanced/fusion.html",title:"使用 fusion 组件",lang:"zh-CN",frontmatter:{title:"使用 fusion 组件",order:14},excerpt:"",headers:[{level:2,title:"使用插件",slug:"使用插件",children:[]},{level:2,title:"通过主题包定制组件样式",slug:"通过主题包定制组件样式",children:[]},{level:2,title:"业务代码支持主题切换",slug:"业务代码支持主题切换",children:[]},{level:2,title:"配置 externals",slug:"配置-externals",children:[]},{level:2,title:"修改 prefix",slug:"修改-prefix",children:[]},{level:2,title:"动态切换主题",slug:"动态切换主题",children:[]},{level:2,title:"使用 css variables 样式",slug:"使用-css-variables-样式",children:[]},{level:2,title:"跨端用法",slug:"跨端用法",children:[{level:3,title:"API",slug:"api",children:[]},{level:3,title:"componentOptions 详解",slug:"componentoptions-详解",children:[]}]}],filePathRelative:"guide/advanced/fusion.md",git:{updatedTime:1621332393e3,contributors:[]}}},7956:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>f});var p=a(6252);const e=(0,p.uE)('<p>项目开发中如果使用 <code>@alifd/next</code> 作为基础 UI 组件，可以通过 <code>build-plugin-fusion</code> 插件实现组件按需加载和样式主题等相关能力。</p><h2 id="使用插件"><a class="header-anchor" href="#使用插件">#</a> 使用插件</h2><p>安装依赖：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> build-plugin-fusion --save-dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在 build.json 中引入插件：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&quot;build-plugin-fusion&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...options</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>插件配置项：</p><ul><li><code>themePackage</code> Fusion 组件主题包配置，如果设置为数组则启动多主题能力</li><li><code>themeConfig</code> 主题配置，通过设置 sass 变量对现有主题进行覆盖</li><li><code>uniteBaseComponent</code> 如果项目里依赖了多个不同名称的基础包，可以通过 uniteBaseComponent 来统一基础包，减少重复的代码</li><li><code>importOptions</code> 同 <code>babel-plugin-import</code> 参数，默认为 <code>{ style: true, libraryDirectory: &#39;es&#39;}</code> 根据用户设置项将进行合并</li><li><code>externalNext</code> 配合 <code>externals</code> 配置，将 Next 组件作为外部依赖引入</li><li><code>usePx2Vw</code> 配合 postcss 插件，将 css 样式单位 px 转化为 vw ，默认为 false 不开启， true 为开启</li><li><code>px2vwOptions</code> 传递参数给postcss插件，默认为<code>{ viewportWidth: 750 }</code> 根据用户设置项将进行合并</li><li><code>componentOptions</code> 值为对象，修改业务组件的引入路径，推荐用在 PC 跨 H5 的项目中，给业务组件指定 H5 的渲染组件</li><li><code>enableColorNames</code> 默认为 <code>false</code>，如果开启默认将提取 <code>transparent</code>、<code>red</code>、<code>blue</code> 等色值名称</li><li><code>nextPrefix</code> 仅修改 <code>@alifd/next</code> 里的 css-prefix，一般用于 0.x&amp;1.x 共存的场景</li><li><code>cssVariable</code> 默认为 <code>false</code>，如果开启后将默认使用 css variables 的样式方案替换 sass 方案</li></ul><h2 id="通过主题包定制组件样式"><a class="header-anchor" href="#通过主题包定制组件样式">#</a> 通过主题包定制组件样式</h2>',9),t=(0,p.Uk)("ICE 脚手架中默认使用了 "),o=(0,p.Wm)("code",null,"@alifd/theme-design-pro",-1),l=(0,p.Uk)(" 这个主题包，如果不能满足需求则可以让设计师配置业务需要的主题包："),c={href:"https://fusion.design/help.html#/design-config-component",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("配置组件主题样式"),r=(0,p.Uk)(" ，每个主题包对应一个 npm 包。"),u=(0,p.uE)('<p>在 <code>build.json</code> 中配置主题包：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>{\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &quot;plugins&quot;: [\n</span><span class="token prefix unchanged"> </span><span class="token line">   [&quot;build-plugin-fusion&quot;, {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      &quot;themePackage&quot;: &quot;@alifd/theme-design-pro&quot;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   }]\n</span><span class="token prefix unchanged"> </span><span class="token line"> ]\n</span></span>}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在配置主题包时，可以通过 iconfont 导入一些自定义的 icon，这些 icon 在项目代码里通过基础组件 Icon 即可使用：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Icon <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@alifd/next&#39;</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Icon</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxxx<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="业务代码支持主题切换"><a class="header-anchor" href="#业务代码支持主题切换">#</a> 业务代码支持主题切换</h2>',5),k=(0,p.Uk)("在项目中也可以使用主题包的变量，这样未来如果需要更换主题，业务代码就不需要做任何改动了，可以使用的变量列表请参考 "),d={href:"https://fusion.design/component/tokens",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("Fusion Design Tokens"),m=(0,p.Uk)("，使用方式如下："),g=(0,p.uE)('<div class="language-scss ext-scss line-numbers-mode"><pre class="language-scss"><code><span class="token comment">// 引入主题变量</span>\n<span class="token keyword">@import</span> <span class="token string">&quot;~@alifd/next/lib/core/index.scss&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用主题变量</span>\n<span class="token selector">.title </span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color-brand1-6</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="配置-externals"><a class="header-anchor" href="#配置-externals">#</a> 配置 externals</h2><p>项目开发中希望将 <code>@alifd/next</code> 作为外部扩展不打包到 bundle 中，除了需要配置 <code>externals</code> 外，还需要将通过插件能力分析业务组件依赖中按需加载的 Next 组件：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;externals&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;@alifd/next&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Next&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&quot;build-plugin-fusion&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;externalNext&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="修改-prefix"><a class="header-anchor" href="#修改-prefix">#</a> 修改 prefix</h2><p>fusion 组件的默认 class 前缀是 <code>next-</code>，在微前端等场景下可能需要修改 prefix：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&quot;build-plugin-fusion&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;themePackage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@alifd/theme-design-pro&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;themeConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;css-prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next-icestark-&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面只是修改了 CSS 产物里的 prefix，同时还需要修改 js 里的 prefix 才能保证最终的一致性：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>import { runApp } from &#39;ice&#39;\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { ConfigProvider } from &#39;@alifd/next&#39;;\n</span></span>\nconst appConfig = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> app: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    addProvider: ({ children }) =&gt; (\n</span><span class="token prefix inserted">+</span><span class="token line">      &lt;ConfigProvider prefix=&quot;next-icestark-&quot;&gt;{children}&lt;/ConfigProvider&gt;\n</span><span class="token prefix inserted">+</span><span class="token line">    ),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> },\n</span><span class="token prefix unchanged"> </span><span class="token line"> },\n</span></span>};\n\nrunApp(appConfig);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="动态切换主题"><a class="header-anchor" href="#动态切换主题">#</a> 动态切换主题</h2><p>build-plugin-fusion 结合 fusion 自身可以配置主题包的能力，支持多个主题包的配置，大大简化多主题切换的成本，通过 css 变量能力实现动态主题的切换，核心实现思路如下：</p><ol><li>提取主题包中的 scss 变量（色值变量）</li><li>将 scss 变量具体内容转换为 css 变量，即 <code>$color-brand1-1: #E2EDFF; =&gt; $color-brand1-1: var(--color-brand-1);</code></li><li>注入新的 scss 变量值（如 <code>$color-brand1-1: var(--color-brand-1)</code> ）进行编译</li><li>在 window 下注入 <code>__changeTheme__</code> 方法，实现不同主题包全局 css 变量声明的切换</li></ol><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&quot;build-plugin-fusion&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;themePackage&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@alifd/theme-design-pro&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;themeConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">&quot;custom-color&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#000&quot;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@alifd/theme-ice-purple&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;themeConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">&quot;custom-color&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#fff&quot;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>通过数组的方式配置多个主题，实现多主题内容的注入。 build.json 中完成多主题包配置后，业务代码中可以直接调用 <code>__changeTheme__</code> 方法在多个主题包之间进行切换：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 可以在设置的主题包 @icedesign/theme 和 @alifd/theme-ice-purple 之间切换</span>\nwindow<span class="token punctuation">.</span><span class="token function">__changeTheme__</span><span class="token punctuation">(</span><span class="token string">&#39;@alifd/theme-ice-purple&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="使用-css-variables-样式"><a class="header-anchor" href="#使用-css-variables-样式">#</a> 使用 css variables 样式</h2><p>在 <code>build.json</code> 中开启 <code>cssVariable</code> 配置：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>{\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &quot;plugins&quot;: [\n</span><span class="token prefix unchanged"> </span><span class="token line">   [&quot;build-plugin-fusion&quot;, {\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;themePackage&quot;: &quot;@alifd/theme-2&quot;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     &quot;cssVariable&quot;: true\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   }]\n</span><span class="token prefix unchanged"> </span><span class="token line"> ]\n</span></span>}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>开启后 css 样式中用可以使用如下 css variables 变量：</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.color</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-brand1-6<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用须知： 如果开启 <code>cssVariable</code> 主题包需要为新版主题包，即需要包含 variable.css 文件（文件内定义 css variables 变量）。不符合要求的主题包，在 fusion 官网生成最新版本主题包即可。</p><blockquote><p>该属性在 build-plugin-fusion 0.1.14 版本以上开始支持</p></blockquote><h2 id="跨端用法"><a class="header-anchor" href="#跨端用法">#</a> 跨端用法</h2><h3 id="api"><a class="header-anchor" href="#api">#</a> API</h3><ul><li>增加 <code>componentOptions</code> API，该接口值为对象，可接受 <code>bizComponent</code> <code>customPath</code> <code>componentMap</code> 等参数</li><li>增加 <code>usePx2Vw</code> API，跨端模式下请开启</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;build-plugin-fusion&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      usePx2Vw<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                       <span class="token comment">// 开启r?px =&gt; vw 的单位转换</span>\n      importOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        libraryDirectory<span class="token operator">:</span> <span class="token string">&#39;lib&#39;</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">customName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                             <span class="token comment">// 自定义「基础组件」的 H5 的引入路径，注意对 @alifd/next 的版本要求</span>\n          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;config-provider&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@alifd/next/lib/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@alifd/next/lib/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/mobile</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          <span class="token comment">// mobile 是在 1.21.7-alpha 版本开始支持的</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">customStyleName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 引入没有Mobile版本的PC组件的样式</span>\n          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@alifd/next/lib/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/style.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      componentOptions<span class="token operator">:</span> <span class="token punctuation">{</span>                                            <span class="token comment">// 自定义「业务组件」的H5的引入路径</span>\n        bizComponent<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@alifd/anchor&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@alifd/pro-components&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 业务组件列表</span>\n        customPath<span class="token operator">:</span> <span class="token string">&#39;/es/mobile&#39;</span><span class="token punctuation">,</span>                                    <span class="token comment">// 默认值为&#39;&#39;</span>\n        componentMap<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token string">&#39;@alifd/pro-components2&#39;</span><span class="token operator">:</span> <span class="token string">&#39;@alifd/pro-components2-mobile&#39;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="componentoptions-详解"><a class="header-anchor" href="#componentoptions-详解">#</a> componentOptions 详解</h3><p>用来自定义业务组件的引用路径及入口</p><h4 id="bizcomponent-需要自定义路径的组件"><a class="header-anchor" href="#bizcomponent-需要自定义路径的组件">#</a> bizComponent 需要自定义路径的组件</h4><p>类型为数组，与 <code>customPath</code> 共同作用生效 bizComponent: [&#39;@alifd/anchor&#39;, &#39;@alifd/pro-components&#39;] customPath: &#39;/es/mobile&#39;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Anchor <span class="token keyword">from</span> <span class="token string">&#39;@alifd/anchor&#39;</span><span class="token punctuation">;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Anchor<span class="token operator">&gt;</span>xxxx<span class="token operator">&lt;</span><span class="token operator">/</span>Anchor<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      ↓ ↓ ↓ ↓ ↓ ↓\n<span class="token keyword">var</span> _anchor <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@alifd/anchor/es/mobile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 差别在这里 多了一层 es 和 mobile </span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>_anchor<span class="token operator">&gt;</span>xxxx<span class="token operator">&lt;</span><span class="token operator">/</span>_anchor<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="custompath-自定义的路径"><a class="header-anchor" href="#custompath-自定义的路径">#</a> customPath 自定义的路径</h4><p>结合 <code>bizComponent</code> 一起生效，用法参考 <code>bizComponent</code> 文档。</p><h4 id="componentmap-组件路径映射"><a class="header-anchor" href="#componentmap-组件路径映射">#</a> componentMap 组件路径映射</h4><p>类型为对象，表示路径映射的 mapping ，若与 <code>bizComponent</code> 冲突，则以 <code>componentMap</code> 为优先</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>componentMap<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;@alifd/pro-components&#39;</span><span class="token operator">:</span> <span class="token string">&#39;@alifd/pro-components/lib/mobile&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;@alifd/pro-components2&#39;</span><span class="token operator">:</span> <span class="token string">&#39;@alifd/pro-components2/es/mobile&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;@alifd/pro-components&#39;</span><span class="token operator">:</span> <span class="token string">&#39;@alifd/pro-components-mobile&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',36),f={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[t,o,l,(0,p.Wm)("a",c,[i,(0,p.Wm)(a)]),r]),u,(0,p.Wm)("p",null,[k,(0,p.Wm)("a",d,[b,(0,p.Wm)(a)]),m]),g],64)}}}}]);