(self.webpackChunksite=self.webpackChunksite||[]).push([[5671],{1911:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-744497ce",path:"/api/",title:"框架 API",lang:"zh-CN",frontmatter:{title:"框架 API",order:13},excerpt:"",headers:[{level:2,title:"基础",slug:"基础",children:[{level:3,title:"runApp",slug:"runapp",children:[]},{level:3,title:"config",slug:"config",children:[]},{level:3,title:"APP_MODE",slug:"app-mode",children:[]},{level:3,title:"ErrorBoundary",slug:"errorboundary",children:[]}]},{level:2,title:"状态管理",slug:"状态管理",children:[{level:3,title:"store",slug:"store",children:[]}]},{level:2,title:"路由",slug:"路由",children:[{level:3,title:"Link",slug:"link",children:[]},{level:3,title:"NavLink",slug:"navlink",children:[]},{level:3,title:"Prompt",slug:"prompt",children:[]},{level:3,title:"useHistory",slug:"usehistory",children:[]},{level:3,title:"useLocation",slug:"uselocation",children:[]},{level:3,title:"useParams",slug:"useparams",children:[]},{level:3,title:"useRouteMatch",slug:"useroutematch",children:[]},{level:3,title:"getSearchParams",slug:"getsearchparams",children:[]},{level:3,title:"useSearchParams",slug:"usesearchparams",children:[]},{level:3,title:"withSearchParams",slug:"withsearchparams",children:[]},{level:3,title:"withRouter",slug:"withrouter",children:[]},{level:3,title:"matchPath",slug:"matchpath",children:[]},{level:3,title:"history",slug:"history",children:[]},{level:3,title:"createHashHistory",slug:"createhashhistory",children:[]},{level:3,title:"createBrowserHistory",slug:"createbrowserhistory",children:[]},{level:3,title:"createMemoryHistory",slug:"creatememoryhistory",children:[]}]},{level:2,title:"数据请求",slug:"数据请求",children:[{level:3,title:"request",slug:"request",children:[]},{level:3,title:"useRequest",slug:"userequest",children:[]}]},{level:2,title:"工具方法",slug:"工具方法",children:[{level:3,title:"getInitialData",slug:"getinitialdata",children:[]},{level:3,title:"lazy",slug:"lazy",children:[]},{level:3,title:"logger",slug:"logger",children:[]}]},{level:2,title:"类型",slug:"类型",children:[{level:3,title:"IAppConfig",slug:"iappconfig",children:[]},{level:3,title:"IRouterConfig",slug:"irouterconfig",children:[]},{level:3,title:"IRootDispatch",slug:"irootdispatch",children:[]},{level:3,title:"IRootState",slug:"irootstate",children:[]}]},{level:2,title:"环境变量",slug:"环境变量",children:[{level:3,title:"process.env.__IS_SERVER__",slug:"process-env-is-server",children:[]},{level:3,title:"process.env.SERVER_PORT",slug:"process-env-server-port",children:[]},{level:3,title:"process.env.NODE_ENV",slug:"process-env-node-env",children:[]}]}],filePathRelative:"api/README.md",git:{updatedTime:1621402728e3,contributors:[]}}},1592:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>r});var e=a(6252);const p=(0,e.uE)('<h2 id="基础"><a class="header-anchor" href="#基础">#</a> 基础</h2><h3 id="runapp"><a class="header-anchor" href="#runapp">#</a> runApp</h3><blockquote><p>1.7.0 版本之后推荐使用 runApp 替代原先的 createApp</p></blockquote><p>用于创建渲染整个应用。<a href="/docs/guide/basic/app">详见</a></p><h3 id="config"><a class="header-anchor" href="#config">#</a> config</h3><p>获取应用运行时配置。<a href="/docs/guide/basic/config">详见</a></p><h3 id="app-mode"><a class="header-anchor" href="#app-mode">#</a> APP_MODE</h3><p>获取应用环境。<a href="/docs/guide/basic/config">详见</a></p><h3 id="errorboundary"><a class="header-anchor" href="#errorboundary">#</a> ErrorBoundary</h3><p>用于错误边界的组件。<a href="/docs/guide/basic/error-boundaries#ErrorBoundary">详见</a></p><h2 id="状态管理"><a class="header-anchor" href="#状态管理">#</a> 状态管理</h2><h3 id="store"><a class="header-anchor" href="#store">#</a> store</h3><p>应用级别的 store 实例。<a href="/docs/guide/basic/store">详见</a></p><h2 id="路由"><a class="header-anchor" href="#路由">#</a> 路由</h2><h3 id="link"><a class="header-anchor" href="#link">#</a> Link</h3><p>通过 <code>&lt;Link /&gt;</code> 标签组件可实现路由跳转，使用方式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&#39;/courses?sort=name&#39;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n\n      <span class="token punctuation">{</span><span class="token comment">/* 可以携带额外的数据 `state` 到路由中。 */</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>Link\n        to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n          pathname<span class="token operator">:</span> <span class="token string">&#39;/courses&#39;</span><span class="token punctuation">,</span>\n          search<span class="token operator">:</span> <span class="token string">&#39;?sort=name&#39;</span><span class="token punctuation">,</span>\n          hash<span class="token operator">:</span> <span class="token string">&#39;#the-hash&#39;</span><span class="token punctuation">,</span>\n          state<span class="token operator">:</span> <span class="token punctuation">{</span> fromDashboard<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="navlink"><a class="header-anchor" href="#navlink">#</a> NavLink</h3><p>NavLink 组件的用法和 Link 组件基本相同，区别在于 NavLink 组件匹配时可以添加 active 属性。</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>/faq<span class="token punctuation">&#39;</span></span> <span class="token attr-name">activeClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>selected<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  FAQs\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="prompt"><a class="header-anchor" href="#prompt">#</a> Prompt</h3><p>在离开页面路由跳转时，自定义拦截组件。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Prompt <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">PromptMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>\n      <span class="token punctuation">{</span><span class="token comment">/* 用户离开页面时给出曲儿提示 */</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>Prompt message<span class="token operator">=</span><span class="token string">&quot;你确定要离开吗？&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="usehistory"><a class="header-anchor" href="#usehistory">#</a> useHistory</h3><p>useHistory hook 用于获取 history 实例。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">HomeButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">&#39;button&#39;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      Go home\n    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="uselocation"><a class="header-anchor" href="#uselocation">#</a> useLocation</h3><p>useLocation hook 返回当前 URL 的 <code>location</code> 对象。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useLocation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>location<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="useparams"><a class="header-anchor" href="#useparams">#</a> useParams</h3><p>useParams hook 返回 URL 参数的 <code>parmas</code> 对象。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="useroutematch"><a class="header-anchor" href="#useroutematch">#</a> useRouteMatch</h3><p>useRouteMatch hook 返回当前路由的匹配信息。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouteMatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token function">useRouteMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>match<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="getsearchparams"><a class="header-anchor" href="#getsearchparams">#</a> getSearchParams</h3><p>用于在非路由函数组件中解析 url 参数。</p><p>假设当前 URL 为 <code>https://example.com?foo=bar</code>，解析查询参数如下：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token comment">// src/components/Example</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getSearchParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> searchParams <span class="token operator">=</span> <span class="token function">getSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// console.log(searchParams); =&gt; { foo: &#39;bar&#39; }</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="usesearchparams"><a class="header-anchor" href="#usesearchparams">#</a> useSearchParams</h3><p><strong>已废弃</strong>，请使用 getSearchParams。用于在非路由函数组件中解析 url 参数。</p><p>假设当前 URL 为 <code>https://example.com?foo=bar</code>，解析查询参数如下：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token comment">// src/components/Example</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useSearchParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> searchParams <span class="token operator">=</span> <span class="token function">useSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// console.log(searchParams); =&gt; { foo: &#39;bar&#39; }</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="withsearchparams"><a class="header-anchor" href="#withsearchparams">#</a> withSearchParams</h3><p><strong>已废弃</strong>，请使用 getSearchParams。与 <code>useSearchParams</code> 对应，用在 Class Component 中。</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> withSearchParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n@withSearchParams\n<span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> searchParams <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    <span class="token comment">// console.log(searchParams); =&gt; { foo: bar }</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Foo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="withrouter"><a class="header-anchor" href="#withrouter">#</a> withRouter</h3><p>通过在 Class 组件上添加 <code>withRouter</code> 装饰器，可以获取到路由的 <code>history</code>、<code>location</code>、<code>match</code> 对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">ShowTheLocation</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> location <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleHistoryPush</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/new-path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>当前路径： <span class="token punctuation">{</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleHistoryPush<span class="token punctuation">}</span><span class="token operator">&gt;</span>点击跳转新页面<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>ShowTheLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="matchpath"><a class="header-anchor" href="#matchpath">#</a> matchPath</h3><p>判断当前 URL 是否匹配。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> matchPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token function">matchPath</span><span class="token punctuation">(</span><span class="token string">&#39;/users/123&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  path<span class="token operator">:</span> <span class="token string">&#39;/users/:id&#39;</span><span class="token punctuation">,</span>\n  exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  strict<span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="history"><a class="header-anchor" href="#history">#</a> history</h3><p>获取应用的路由实例。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用于获取 history 栈里的实体个数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用于获取 history 跳转的动作，包含 PUSH、REPLACE 和 POP 三种类型</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用于获取 location 对象，包含 pathname、search 和 hash</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用于路由跳转</span>\nhistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用于路由替换</span>\nhistory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用于跳转到上一个路由</span>\nhistory<span class="token punctuation">.</span><span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',55),t=(0,e.Uk)("更多 "),o={href:"https://github.com/ReactTraining/history/blob/master/docs/api-reference.md",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("history API"),l=(0,e.uE)('<h3 id="createhashhistory"><a class="header-anchor" href="#createhashhistory">#</a> createHashHistory</h3><p>用于创建 HashHistory 对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">createHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="createbrowserhistory"><a class="header-anchor" href="#createbrowserhistory">#</a> createBrowserHistory</h3><p>用于创建 BrowserHistory 对象。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createBrowserHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">createBrowserHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="creatememoryhistory"><a class="header-anchor" href="#creatememoryhistory">#</a> createMemoryHistory</h3><p>用于创建 MemoryHistory 对象。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createMemoryHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">createMemoryHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="数据请求"><a class="header-anchor" href="#数据请求">#</a> 数据请求</h2><h3 id="request"><a class="header-anchor" href="#request">#</a> request</h3><p>用于数据请求的方法。<a href="/docs/guide/basic/request#request">详见</a></p><h3 id="userequest"><a class="header-anchor" href="#userequest">#</a> useRequest</h3><p>用于数据请求的 hooks。<a href="/docs/guide/basic/request#useRequest">详见</a></p><h2 id="工具方法"><a class="header-anchor" href="#工具方法">#</a> 工具方法</h2><h3 id="getinitialdata"><a class="header-anchor" href="#getinitialdata">#</a> getInitialData</h3><p>获取通过 <code>app.getInitialData</code> 返回的 initialData 数据。<a href="/docs/guide/advance/ssr#%E5%BA%94%E7%94%A8%E7%BA%A7%E6%95%B0%E6%8D%AE">详见</a></p><h3 id="lazy"><a class="header-anchor" href="#lazy">#</a> lazy</h3><p>用于代码懒加载。<a href="/docs/guide/advance/code-splitting">详见</a></p><h3 id="logger"><a class="header-anchor" href="#logger">#</a> logger</h3><p>用于日志打印。<a href="/docs/guide/basic/logger">详见</a></p><h2 id="类型"><a class="header-anchor" href="#类型">#</a> 类型</h2><h3 id="iappconfig"><a class="header-anchor" href="#iappconfig">#</a> IAppConfig</h3><p>appConfig 的类型定义。</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { runApp, IAppConfig } from &#39;ice&#39;;\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const appConfig: IAppConfig {\n</span></span>\n}\n\nrunApp();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="irouterconfig"><a class="header-anchor" href="#irouterconfig">#</a> IRouterConfig</h3><p>路由配置的类型定义。</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { IRouterConfig } from &#39;ice&#39;;\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const routerConfig: IRouterConfig = [\n</span></span>\n];\n\nexport default routerConfig;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="irootdispatch"><a class="header-anchor" href="#irootdispatch">#</a> IRootDispatch</h3><p>状态管理中全局模型 dispatch 的类型。</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { IRootDispatch } from &#39;ice&#39;;\n</span></span>\nconst model = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> state: [],\n</span><span class="token prefix unchanged"> </span><span class="token line"> reducers: {},\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> effects: (dispatch: IRootDispatch) =&gt; ({\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> })\n</span></span>};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="irootstate"><a class="header-anchor" href="#irootstate">#</a> IRootState</h3><p>状态管理中全局模型的 rootState 的类型。</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { IRootState } from &#39;ice&#39;;\n</span></span>\nconst model = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> state: [],\n</span><span class="token prefix unchanged"> </span><span class="token line"> reducers: {},\n</span><span class="token prefix unchanged"> </span><span class="token line"> effects: (dispatch) =&gt; ({\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   like(playload, rootState: IRootState) {\n</span><span class="token prefix inserted">+</span><span class="token line">    }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> })\n</span></span>};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="环境变量"><a class="header-anchor" href="#环境变量">#</a> 环境变量</h2><p>icejs 会将一些环境变量注入到运行时，前端代码中可直接使用。</p><h3 id="process-env-is-server"><a class="header-anchor" href="#process-env-is-server">#</a> <code>process.env.__IS_SERVER__</code></h3><p>开启 SSR 之后，用于判断是否是服务端执行</p><h3 id="process-env-server-port"><a class="header-anchor" href="#process-env-server-port">#</a> <code>process.env.SERVER_PORT</code></h3><p>本地调试时使用的端口号</p><h3 id="process-env-node-env"><a class="header-anchor" href="#process-env-node-env">#</a> <code>process.env.NODE_ENV</code></h3><p><code>icejs start</code> 对应 <code>development</code>，其他情况（build）对应 <code>production</code></p>',42),r={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,(0,e.Wm)("a",o,[c,(0,e.Wm)(a)])]),l],64)}}}}]);