(self.webpackChunksite=self.webpackChunksite||[]).push([[8174],{7215:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-f7d15e2e",path:"/guide/basic/component.html",title:"编写组件",lang:"zh-CN",frontmatter:{title:"编写组件",order:11},excerpt:"",headers:[{level:2,title:"编写组件",slug:"编写组件",children:[{level:3,title:"Function or Class Component",slug:"function-or-class-component",children:[]},{level:3,title:"组件组合",slug:"组件组合",children:[]},{level:3,title:"Props",slug:"props",children:[]},{level:3,title:"JSX 语法",slug:"jsx-语法",children:[]}]},{level:2,title:"React Hooks",slug:"react-hooks",children:[]}],filePathRelative:"guide/basic/component.md",git:{updatedTime:1621351902e3,contributors:[]}}},4388:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>U});var t=a(6252);const p=(0,t.uE)('<p>在 React 中组件是非常重要的概念，因此我们需要了解编写组件的一些基础知识。</p><h2 id="编写组件"><a class="header-anchor" href="#编写组件">#</a> 编写组件</h2><h3 id="function-or-class-component"><a class="header-anchor" href="#function-or-class-component">#</a> Function or Class Component</h3><p>推荐使用 Function Component，即一个普通的 JavaScript 函数：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="组件组合"><a class="header-anchor" href="#组件组合">#</a> 组件组合</h3><p>组件可以被任意组合，比如：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Welcome</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Welcome</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="props"><a class="header-anchor" href="#props">#</a> Props</h3><p>Props 可以理解为函数参数，调用组件的地方可以指定这个组件的 Props。</p><p>Props 是只读的，不允许组件内部修改传入的 props 参数。</p><h3 id="jsx-语法"><a class="header-anchor" href="#jsx-语法">#</a> JSX 语法</h3><p>在函数组件中 return 的即 jsx 的语法，比如：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="jsx-声明"><a class="header-anchor" href="#jsx-声明">#</a> JSX 声明</h4><p>JSX 的声明方式和普通 HTML 标签一样，用 <code>&lt;&gt;</code> 标签包裹，也可以嵌套:</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Good to see you here.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>假如标签内没有子元素，可以使用 <code>/&gt;</code> 来闭合标签：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="在-jsx-中使用表达式"><a class="header-anchor" href="#在-jsx-中使用表达式">#</a> 在 JSX 中使用表达式</h4><p>JSX 中可以插入任意 JavaScript 表达式。JSX中的表达式必须写在大括号 <code>{}</code> 中：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token string">&#39;Hello&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;world!&#39;</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>表达式中不能使用 <code>if else</code> 语句，但可以使用三元运算符 <code>a ? b : c</code> 来实现条件选择。</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token boolean">true</span> <span class="token operator">?</span> <span class="token string">&#39;True!&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;False!&#39;</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="使用-jsx-数组"><a class="header-anchor" href="#使用-jsx-数组">#</a> 使用 JSX 数组</h4><p>可以在一个 JSX 元素中直接嵌套包含多个元素的数组，数组内的 JSX 元素会被逐个渲染：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, Rax！</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>arr<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="在-jsx-中注释"><a class="header-anchor" href="#在-jsx-中注释">#</a> 在 JSX 中注释</h4><p>JSX 注释和表达式一样，必须写在大括号 <code>{}</code> 中：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token comment">/*注释...*/</span><span class="token punctuation">}</span><span class="token plain-text"> Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="属性差异"><a class="header-anchor" href="#属性差异">#</a> 属性差异</h5><p>JSX 与 HTML 之间有很多属性存在差异：</p><h5 id="classname"><a class="header-anchor" href="#classname">#</a> className</h5><p>className 属性用于指定 CSS 的 class，此特性适用于所有常规 DOM 节点和 SVG 元素，如 <code>&lt;div&gt;</code>，<code>&lt;a&gt;</code> 及其它标签。</p><p>如果你在 JSX 中使用 Web Components，请使用 class 属性代替。</p><h5 id="dangerouslysetinnerhtml"><a class="header-anchor" href="#dangerouslysetinnerhtml">#</a> dangerouslySetInnerHTML</h5><p>dangerouslySetInnerHTML 是浏览器 DOM 提供 innerHTML 的替换方案。通常来讲，使用代码直接设置 HTML 存在风险，因为很容易无意中使用户暴露于跨站脚本（XSS）的攻击。因此，你可以直接在 JSX 中设置 HTML，但当你想设置 dangerouslySetInnerHTML 时，需要向其传递包含 key 为 <code>__html</code> 的对象，以此来警示你。例如：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">createMarkup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>__html<span class="token operator">:</span> <span class="token string">&#39;First &amp;middot; Second&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dangerouslySetInnerHTML</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">createMarkup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="htmlfor"><a class="header-anchor" href="#htmlfor">#</a> htmlFor</h5><p>由于 for 在 JavaScript 中是保留字，所以 JSX 元素中使用了 htmlFor 来代替。</p>',40),e=(0,t.Uk)("关于组件编写的更多细节请参考 "),o={href:"https://reactjs.org/docs/state-and-lifecycle.html",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("React 官方文档"),l=(0,t.Uk)("。"),u=(0,t.uE)('<h2 id="react-hooks"><a class="header-anchor" href="#react-hooks">#</a> React Hooks</h2><p>在编写组件过程中，我们会经常用到 React Hooks，除了 React 内置的 <code>useState</code>, <code>useMemo</code> 等 Hooks，我们结合大量实践沉淀了一套 ahooks 的解决方案，可以减少很多重复编码工作。</p><p>比如当我们需要监听并操作 url query，就可以直接使用 <code>useUrlState</code> 这个 hooks：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useUrlState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ahooks&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>urlQuery<span class="token punctuation">,</span> setUrlQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useUrlState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setUrlQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>urlQuery<span class="token punctuation">.</span>count <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        add\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setUrlQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        clear\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">urlQuery.count: </span><span class="token punctuation">{</span>urlQuery<span class="token operator">?.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>通过类似 <code>useUrlState</code> 的封装，可以极大的减少我们的编码量。ahooks 主要提供了以下几类 Hooks：</p>',5),r={href:"https://ahooks.js.org/zh-CN/hooks/table/use-fusion-table",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Uk)("Table"),i={href:"https://ahooks.js.org/zh-CN/hooks/ui/use-drop",target:"_blank",rel:"noopener noreferrer"},g=(0,t.Uk)("UI"),d={href:"https://ahooks.js.org/zh-CN/hooks/state/use-boolean",target:"_blank",rel:"noopener noreferrer"},m=(0,t.Uk)("State"),b={href:"https://ahooks.js.org/zh-CN/hooks/life-cycle/use-debounce-effect",target:"_blank",rel:"noopener noreferrer"},h=(0,t.Uk)("SideEffect"),x={href:"https://ahooks.js.org/zh-CN/hooks/life-cycle/use-debounce-effect",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Uk)("LifeCycle"),v={href:"https://ahooks.js.org/zh-CN/hooks/dom/use-click-away",target:"_blank",rel:"noopener noreferrer"},j=(0,t.Uk)("DOM"),y={href:"https://ahooks.js.org/zh-CN/hooks/advanced/use-creation",target:"_blank",rel:"noopener noreferrer"},w=(0,t.Uk)("Advanced"),S=(0,t.Uk)("具体使用详见 "),W={href:"https://ahooks.js.org",target:"_blank",rel:"noopener noreferrer"},H=(0,t.Uk)("ahooks"),C=(0,t.Uk)("。"),U={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[p,(0,t.Wm)("p",null,[e,(0,t.Wm)("a",o,[c,(0,t.Wm)(a)]),l]),u,(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("a",r,[k,(0,t.Wm)(a)])]),(0,t.Wm)("li",null,[(0,t.Wm)("a",i,[g,(0,t.Wm)(a)])]),(0,t.Wm)("li",null,[(0,t.Wm)("a",d,[m,(0,t.Wm)(a)])]),(0,t.Wm)("li",null,[(0,t.Wm)("a",b,[h,(0,t.Wm)(a)])]),(0,t.Wm)("li",null,[(0,t.Wm)("a",x,[f,(0,t.Wm)(a)])]),(0,t.Wm)("li",null,[(0,t.Wm)("a",v,[j,(0,t.Wm)(a)])]),(0,t.Wm)("li",null,[(0,t.Wm)("a",y,[w,(0,t.Wm)(a)])])]),(0,t.Wm)("p",null,[S,(0,t.Wm)("a",W,[H,(0,t.Wm)(a)]),C])],64)}}}}]);