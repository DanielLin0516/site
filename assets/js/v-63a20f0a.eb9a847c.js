(self.webpackChunksite=self.webpackChunksite||[]).push([[2002],{2259:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-63a20f0a",path:"/guide/basic/config.html",title:"环境配置",lang:"zh-CN",frontmatter:{title:"环境配置",order:8},excerpt:"",headers:[{level:2,title:"设置环境",slug:"设置环境",children:[]},{level:2,title:"区分工程配置",slug:"区分工程配置",children:[]},{level:2,title:"区分运行时配置",slug:"区分运行时配置",children:[]},{level:2,title:"动态扩展运行时环境",slug:"动态扩展运行时环境",children:[]}],filePathRelative:"guide/basic/config.md",git:{updatedTime:1621402728e3,contributors:[]}}},6298:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>r});var p=a(6252);const e=(0,p.uE)('<p>icejs 支持区分不同环境，开发者可根据环境区分<strong>工程配置</strong>以及<strong>运行时配置</strong>。常见场景：</p><ul><li>多套构建环境，每个环境的工程配置不一样</li><li>应用运行时的一些配置项需要根据环境切换</li></ul><h2 id="设置环境"><a class="header-anchor" href="#设置环境">#</a> 设置环境</h2><p>通过命令行参数可以设置不同的环境，默认情况下支持 <code>start/build</code> 两个环境，对应的即 <code>icejs start/build</code> 两个命令，开发者可以通过 <code>--mode</code> 参数来扩展环境：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icejs start --mode local&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build:daily&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icejs build --mode daily&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icejs build --mode prod&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',5),t=(0,p.Uk)("阿里内部同学可参考"),o={href:"https://yuque.alibaba-inc.com/ice/rdy99p/angwyx#TzBL7",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("文档"),l=(0,p.Uk)("区分日常和线上环境"),u=(0,p.uE)('<h2 id="区分工程配置"><a class="header-anchor" href="#区分工程配置">#</a> 区分工程配置</h2><p>在定义好环境之后，即可在 <code>build.json</code> 中通过 <code>modeConfig</code> 来根据环境区分配置了：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;alias&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;modeConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;daily&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;define&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;vendor&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;prod&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;define&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;vendor&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;build-plugin-esbuild&quot;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>同时在本地插件 <code>build.plugin.js</code> 也可以从 context 上获取到当前 mode：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> command<span class="token punctuation">,</span> commandArgs <span class="token punctuation">}</span> <span class="token operator">=</span> context<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> mode <span class="token operator">=</span> commandArgs<span class="token punctuation">.</span>mode <span class="token operator">||</span> command<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="区分运行时配置"><a class="header-anchor" href="#区分运行时配置">#</a> 区分运行时配置</h2><p>在定义好环境之后，前端代码中即可通过 <code>APP_MODE</code> 拿到当前环境：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">APP_MODE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;APP_MODE&#39;</span><span class="token punctuation">,</span> <span class="token constant">APP_MODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然大多数时候你都不需要关心 <code>APP_MODE</code> 这个变量，只要按照约定的方式区分不同环境的配置即可。在 <code>src/config.ts</code> 中编写不同环境的配置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// src/config.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 默认配置</span>\n  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    appId<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>\n    baseURL<span class="token operator">:</span> <span class="token string">&#39;/api&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  local<span class="token operator">:</span> <span class="token punctuation">{</span>\n    appId<span class="token operator">:</span> <span class="token string">&#39;456&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  daily<span class="token operator">:</span> <span class="token punctuation">{</span>\n    appId<span class="token operator">:</span> <span class="token string">&#39;789&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  prod<span class="token operator">:</span> <span class="token punctuation">{</span>\n    appId<span class="token operator">:</span> <span class="token string">&#39;101&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>配置之后框架会自动根据当前环境将配置进行合并覆盖，开发者只需要在代码中直接使用 <code>config</code> 即可：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>appId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="动态扩展运行时环境"><a class="header-anchor" href="#动态扩展运行时环境">#</a> 动态扩展运行时环境</h2><p>在某些场景下，应用的运行环境跟工程构建环境可能无法完全匹配，比如应用有日常/预发两个运行环境，但实际上只能进行一次构建任务，此时则可以通过运行时扩展环境来支持不同配置。</p><p>在 <code>src/config.ts</code> 中通过域名来扩展环境：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// src/config.ts：动态扩展环境：两种方式</span>\n\n<span class="token comment">// 方式 1. 通过服务端输出到页面上的全局变量</span>\nwindow<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> window<span class="token punctuation">.</span>g_config<span class="token punctuation">.</span>faasEnv<span class="token punctuation">;</span>  <span class="token comment">// window.g_config.faasEnv 也可能是 window.__env__，具体看服务端怎么约定</span>\n  \n<span class="token comment">// 方式 2. 通过 url 地址动态判断 </span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">pre.example.com</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">daily.example.com</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> <span class="token string">&#39;daily&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">example.com</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> <span class="token string">&#39;prod&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  window<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> <span class="token string">&#39;local&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  daily<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pre<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  prod<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>注意：在服务端渲染时不存在 window 变量，需要通过 global 进行定义，如：global._<em>app_mode</em> = &#39;prod&#39;</p></blockquote>',17),r={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[t,(0,p.Wm)("a",o,[c,(0,p.Wm)(a)]),l])]),u],64)}}}}]);