(self.webpackChunksite=self.webpackChunksite||[]).push([[6281],{2807:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-e79798ea",path:"/guide/advanced/error-boundaries.html",title:"错误边界 Error Boundaries",lang:"zh-CN",frontmatter:{title:"错误边界 Error Boundaries",order:7},excerpt:"",headers:[{level:2,title:"应用错误边界",slug:"应用错误边界",children:[]},{level:2,title:"页面错误边界",slug:"页面错误边界",children:[]},{level:2,title:"组件错误边界",slug:"组件错误边界",children:[{level:3,title:"ErrorBoundary",slug:"errorboundary",children:[]}]},{level:2,title:"其他",slug:"其他",children:[]}],filePathRelative:"guide/advanced/error-boundaries.md",git:{updatedTime:1621514473e3,contributors:[]}}},6283:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>k});var p=a(6252);const t=(0,p.uE)('<p>当某个组件出现 JavaScript 错误时不应该影响整个应用的渲染，为了解决这个问题，我们可以通过错误边界（Error Boundaries）进行处理。</p><h2 id="应用错误边界"><a class="header-anchor" href="#应用错误边界">#</a> 应用错误边界</h2><p>错误边界的工作方式类似于 JavaScript 的 <code>catch {}</code>，不同的地方在于错误边界只针对 React 组件。且只有 class 组件才可以成为错误边界组件。大多数情况下，我们只需要声明一次错误边界组件，并在整个应用中使用它。</p><p>icejs 中默认在应用的根组件上添加了 <code>ErrorBoundary</code> 组件，当应用子组件抛出的错误符合补获条件而其自身并未进行处理时，则进入应用的错误边界逻辑作为最后兜底的方案。如下图为补获错误时的备用 UI。</p><p><img src="https://img.alicdn.com/tfs/TB1rNezBAL0gK0jSZFxXXXWHVXa-2880-1754.png" alt=""></p><p>同时，我们也可以通过自 <code>ErrorBoundaryFallback</code> 和 <code>onErrorBoundaryHander</code> 进行自定义：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> runApp<span class="token punctuation">,</span> IAppConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> appConfig<span class="token operator">:</span> IAppConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  app<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 是否开启 ErrorBoundary，默认为 false</span>\n    errorBoundary<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token comment">// 自定义错误边界的 fallback UI</span>\n    <span class="token function-variable function">ErrorBoundaryFallback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">渲染错误</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n    <span class="token comment">// 自定义错误的处理事件</span>\n    onErrorBoundaryHander<span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">,</span> componentStack<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Do something with the error</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">runApp</span><span class="token punctuation">(</span>appConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="页面错误边界"><a class="header-anchor" href="#页面错误边界">#</a> 页面错误边界</h2><p>除了应用级别配置错误边界，也可以对每个页面进行配置：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">HomePage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Home</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token punctuation">}</span>\n\nHomePage<span class="token punctuation">.</span>pageConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当前页面开启 ErrorBoundary，默认为 false</span>\n  errorBoundary<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="组件错误边界"><a class="header-anchor" href="#组件错误边界">#</a> 组件错误边界</h2><p>错误边界的粒度可以是应用级别，页面级别，也有可能是组件级别，因此 icejs 也提供了 <code>ErrorBoundary</code> 组件，用于自行处理错误边界的情况。</p><h3 id="errorboundary"><a class="header-anchor" href="#errorboundary">#</a> ErrorBoundary</h3><p>错误边界组件，用法如下：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ErrorBoundary <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Todo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>ErrorBoundary\n      <span class="token punctuation">{</span><span class="token comment">/* 自定义错误边界的 fallback UI */</span><span class="token punctuation">}</span>\n      Fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">渲染错误</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span>\n      <span class="token punctuation">{</span><span class="token comment">/* 自定义错误的处理事件 */</span><span class="token punctuation">}</span>\n      onError<span class="token operator">=</span><span class="token punctuation">{</span>myErrorHandler<span class="token punctuation">}</span>\n    <span class="token operator">&gt;</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TodoList</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ErrorBoundary</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="其他"><a class="header-anchor" href="#其他">#</a> 其他</h2><p>错误边界无法捕获以下场景中产生的错误：</p>',17),e=(0,p.Uk)("事件处理（"),o={href:"https://reactjs.org/docs/error-boundaries.html#how-about-event-handlers",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("了解更多"),l=(0,p.Uk)("）"),r=(0,p.Wm)("li",null,"异步代码（例如 setTimeout 或 requestAnimationFrame 回调函数）",-1),u=(0,p.Wm)("li",null,"服务端渲染",-1),i=(0,p.Wm)("li",null,"它自身抛出来的错误（并非它的子组件）",-1),k={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[e,(0,p.Wm)("a",o,[c,(0,p.Wm)(a)]),l]),r,u,i])],64)}}}}]);