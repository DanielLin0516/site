(self.webpackChunksite=self.webpackChunksite||[]).push([[475],{2823:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-0b75dfa8",path:"/plugin/develop/start.html",title:"插件开发指南",lang:"zh-CN",frontmatter:{title:"插件开发指南",order:1},excerpt:"",headers:[{level:2,title:"快速开始",slug:"快速开始",children:[]},{level:2,title:"插件目录",slug:"插件目录",children:[]},{level:2,title:"工程能力定制",slug:"工程能力定制",children:[]},{level:2,title:"运行时能力定制",slug:"运行时能力定制",children:[]},{level:2,title:"单元测试",slug:"单元测试",children:[]},{level:2,title:"插件开发示例",slug:"插件开发示例",children:[{level:3,title:"类型和扩展",slug:"类型和扩展",children:[]},{level:3,title:"工程化能力实现",slug:"工程化能力实现",children:[]},{level:3,title:"运行时能力实现",slug:"运行时能力实现",children:[]}]},{level:2,title:"示例插件",slug:"示例插件",children:[]}],filePathRelative:"plugin/develop/start.md",git:{updatedTime:1621514473e3,contributors:[]}}},2527:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>I});var p=a(6252);const e=(0,p.uE)('<p>icejs 基于工程构建工具 build-scripts 封装，因此在插件能力上也完整继承了 build-scripts。除了通过插件定制工程能力以外，icejs 还为插件扩展了运行时定制的能力，这让插件拥有更多的想象空间。插件机制是 icejs 的核心之一，当前 icejs 的基础能力都是通过插件来实现。插件机制不但可以保证框架核心足够精简和稳定，还可以通过插件对运行时和编译时的能力进行封装复用，最终打造一个完整的生态。</p><h2 id="快速开始"><a class="header-anchor" href="#快速开始">#</a> 快速开始</h2><p>使用 <a href="/docs/guide/start#%E4%BD%BF%E7%94%A8%20CLI">CLI</a> 初始化项目。选择插件模板：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">npm</span> init ice <span class="token operator">&lt;</span>your-plugin-name<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="插件目录"><a class="header-anchor" href="#插件目录">#</a> 插件目录</h2><p>通常情况下，插件通过 npm 包的形式分发，插件初始化目录如下：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>.\n├── src\n│   ├── index.[t,j]s # 插件工程入口\n│   └── runtime.[t,j]s # 插件编译时入口\n├── tests # 测试文件目录\n├── package.json # npm 包配置\n├── tsconfig.json # typescript 配置文件\n└── README.md # 说明文档\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这里以 ts 为例，实际上也可以通过 js 编写插件。 ts 最终应编译为 js 以发布 npm 包。插件核心有两个文件：</p><ol><li><code>index.ts</code>：通常用于做一些工程相关的事情，比如更改 webpack 配置、构建结束后执行一些其他任务等，需保证该文件作为 npm 包入口。</li><li><code>runtime.ts</code>：实现一些运行时能力，比如 config/request 插件。注意: 旧版本的 <code>module.ts</code> 暂时兼容，但在未来不受支持。需保证该文件与 <code>index.ts</code> 位于同一目录下。</li></ol><p>下面也会按照这两个维度来分别介绍。</p><h2 id="工程能力定制"><a class="header-anchor" href="#工程能力定制">#</a> 工程能力定制</h2><p>工程能力以 <code>index.ts</code> 为入口，在执行 start/build 时 icejs 会加载并执行每个插件的 <code>index.js</code>。</p>',12),t=(0,p.Uk)("关于 "),o=(0,p.Wm)("code",null,"index.ts",-1),l=(0,p.Uk)(" 应该如何书写请参考下一个章节的文档 "),c=(0,p.Uk)("通过插件定制工程能力"),i=(0,p.Uk)("。"),r=(0,p.Wm)("h2",{id:"运行时能力定制"},[(0,p.Wm)("a",{class:"header-anchor",href:"#运行时能力定制"},"#"),(0,p.Uk)(" 运行时能力定制")],-1),u=(0,p.Wm)("p",null,[(0,p.Uk)("运行时能力以 "),(0,p.Wm)("code",null,"runtime.ts"),(0,p.Uk)(" 为入口，通过浏览器打开页面时会执行 "),(0,p.Wm)("code",null,"src/app.ts"),(0,p.Uk)(" 中的 "),(0,p.Wm)("code",null,"runApp()"),(0,p.Uk)(" 方法，这个方法会加载并执行所有插件的 "),(0,p.Wm)("code",null,"runtime.ts"),(0,p.Uk)("。")],-1),k=(0,p.Uk)("关于 "),m=(0,p.Wm)("code",null,"runtime.ts",-1),d=(0,p.Uk)(" 应该如何书写请参考下一个章节的文档 "),b=(0,p.Uk)("通过插件定制运行时能力"),g=(0,p.Uk)("。"),h=(0,p.Wm)("h2",{id:"单元测试"},[(0,p.Wm)("a",{class:"header-anchor",href:"#单元测试"},"#"),(0,p.Uk)(" 单元测试")],-1),f=(0,p.Uk)("使用 "),y={href:"https://github.com/facebook/jest",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("Jest"),w=(0,p.Uk)(" 进行单元测试。"),x=(0,p.Wm)("h2",{id:"插件开发示例"},[(0,p.Wm)("a",{class:"header-anchor",href:"#插件开发示例"},"#"),(0,p.Uk)(" 插件开发示例")],-1),W=(0,p.Uk)("以 "),j={href:"https://github.com/alibaba/ice/tree/master/packages/plugin-logger",target:"_blank",rel:"noopener noreferrer"},U=(0,p.Wm)("code",null,"plugin-logger",-1),C=(0,p.Uk)(" 为例。该插件采用 typescript 编写，对工程能力及运行时能力均进行了修改。为框架提供了日志功能。"),P=(0,p.uE)('<p>目录结构：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>.\n├── README.md\n├── template\n│   └── index.ts     <span class="token comment">// logger 功能实现</span>\n├── package.json\n├── src\n│   ├── index.ts      <span class="token comment">// 工程能力实现</span>\n│   ├── runtime.ts    <span class="token comment">// 运行时能力实现</span>\n│   └── types\n│       └── index.ts  <span class="token comment">// 类型声明文件</span>\n└── tsconfig.json\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="类型和扩展"><a class="header-anchor" href="#类型和扩展">#</a> 类型和扩展</h3><ul><li><p>类型声明：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/types/index</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ILogger</span> <span class="token punctuation">{</span>\n  level<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>扩展 appConfig 类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fse <span class="token keyword">from</span> <span class="token string">&#39;fs-extra&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> IPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@alib/build-scripts&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> plugin<span class="token operator">:</span> IPlugin <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> getValue<span class="token punctuation">,</span> applyMethod <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> exportName <span class="token operator">=</span> <span class="token string">&#39;logger&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> distPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;TEMP_PATH&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exportName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> fse<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./types&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>distPath<span class="token punctuation">,</span> <span class="token string">&#39;types&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制类型声明文件</span>\n\n  <span class="token comment">// 挂载至 appConfig。 appConfig 对应类型为 IAppConfig</span>\n  <span class="token comment">// source 为复制后的目录, specifier 为类型标识符，exportName 为 appConfig 类型名</span>\n  <span class="token comment">// 得到以下结果</span>\n  <span class="token comment">// import { ILogger } from &#39;./logger/types&#39;</span>\n  <span class="token comment">// export interface IAppConfig {</span>\n  <span class="token comment">//   logger?: ILogger;</span>\n  <span class="token comment">// }</span>\n  <span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token string">&#39;addIceAppConfigTypes&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    source<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>exportName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/types</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    specifier<span class="token operator">:</span> <span class="token string">&#39;{ ILogger }&#39;</span><span class="token punctuation">,</span>\n    exportName<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>exportName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?: ILogger</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></li></ul><h3 id="工程化能力实现"><a class="header-anchor" href="#工程化能力实现">#</a> 工程化能力实现</h3><ul><li><p>logger 功能实现</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/logger/index.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> logger <span class="token keyword">from</span> <span class="token string">&#39;loglevel&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> logger<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>导出至 ice</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fse <span class="token keyword">from</span> <span class="token string">&#39;fs-extra&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> IPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@alib/build-scripts&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> plugin<span class="token operator">:</span> IPlugin <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> getValue<span class="token punctuation">,</span> applyMethod<span class="token punctuation">,</span> onGetWebpackConfig <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> exportName <span class="token operator">=</span> <span class="token string">&#39;logger&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> distPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&#39;TEMP_PATH&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exportName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> fse<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>exportName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> distPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 导出 logger 功能</span>\n  <span class="token comment">// 用户可通过 import { logger } from &#39;ice&#39;; 使用</span>\n  <span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token string">&#39;addIceExport&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> source<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>exportName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> exportName <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">onGetWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 为 logger 添加 webpack alias，供运行时能力调用</span>\n    config<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">&#39;$ice/logger&#39;</span><span class="token punctuation">,</span> distPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul><h3 id="运行时能力实现"><a class="header-anchor" href="#运行时能力实现">#</a> 运行时能力实现</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> logger <span class="token keyword">from</span> <span class="token string">&#39;$ice/logger&#39;</span><span class="token punctuation">;</span> <span class="token comment">// $ice/logger 通过工程化能力设置 alias</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">module</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> appConfig <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 设置运行时 logger 等级</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>appConfig<span class="token punctuation">.</span>logger <span class="token operator">&amp;&amp;</span> appConfig<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    logger<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span>appConfig<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">module</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="示例插件"><a class="header-anchor" href="#示例插件">#</a> 示例插件</h2><p>官方插件代码：https://github.com/alibaba/ice/tree/master/packages</p>',10),I={render:function(n,s){const a=(0,p.up)("RouterLink"),I=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[t,o,l,(0,p.Wm)(a,{to:"/docs/guide/develop/plugin-build.html"},{default:(0,p.w5)((()=>[c])),_:1}),i]),r,u,(0,p.Wm)("p",null,[k,m,d,(0,p.Wm)(a,{to:"/docs/guide/develop/plugin-runtime.html"},{default:(0,p.w5)((()=>[b])),_:1}),g]),h,(0,p.Wm)("p",null,[f,(0,p.Wm)("a",y,[v,(0,p.Wm)(I)]),w]),x,(0,p.Wm)("p",null,[W,(0,p.Wm)("a",j,[U,(0,p.Wm)(I)]),C]),P],64)}}}}]);