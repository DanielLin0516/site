(self.webpackChunksite=self.webpackChunksite||[]).push([[1080],{8806:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-bb1b36d0",path:"/guide/basic/build.html",title:"工程配置",lang:"zh-CN",frontmatter:{title:"工程配置",order:7},excerpt:"",headers:[{level:2,title:"开发调试",slug:"开发调试",children:[]},{level:2,title:"命令行介绍",slug:"命令行介绍",children:[{level:3,title:"start",slug:"start",children:[]},{level:3,title:"build",slug:"build",children:[]}]},{level:2,title:"工程构建配置",slug:"工程构建配置",children:[]},{level:2,title:"进阶配置",slug:"进阶配置",children:[{level:3,title:"根据环境区分工程配置",slug:"根据环境区分工程配置",children:[]},{level:3,title:"如何开启新的 JSX 转换",slug:"如何开启新的-jsx-转换",children:[]}]},{level:2,title:"自定义工程配置",slug:"自定义工程配置",children:[]},{level:2,title:"调试",slug:"调试",children:[]}],filePathRelative:"guide/basic/build.md",git:{updatedTime:1621566773e3,contributors:[]}}},2288:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>j});var e=a(6252);const p=(0,e.uE)('<p>icejs 基于 build-scripts，因此工程使用方式与 build-scripts 完全一致。</p><h2 id="开发调试"><a class="header-anchor" href="#开发调试">#</a> 开发调试</h2><p>默认情况下，项目的 package.json 会配置以下命令：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icejs start&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icejs build&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>执行 <code>npm start</code> 即可进行项目开发，正常情况下执行命令后自动打开浏览器 <code>http://localhost:3333</code> 进行页面预览，修改源码后浏览器会自动刷新页面。执行 <code>npm run build</code> 进行项目构建，构建产物默认输出到 <code>./build</code> 目录下。</p><h2 id="命令行介绍"><a class="header-anchor" href="#命令行介绍">#</a> 命令行介绍</h2><p>icejs 提供了 start/build 两个核心命令供开发者使用。</p><blockquote><p>在使用 <code>npm run start</code> 命令时，如需传入参数请按照这个格式 <code>npm run start -- --https</code></p></blockquote><h3 id="start"><a class="header-anchor" href="#start">#</a> start</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ icejs start --help\n\nUsage: icejs start <span class="token punctuation">[</span>options<span class="token punctuation">]</span>\n\nOptions:\n  -p, --port <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span>      服务端口号\n  -h, --host <span class="token operator">&lt;</span>host<span class="token operator">&gt;</span>      服务主机名\n  --config <span class="token operator">&lt;</span>config<span class="token operator">&gt;</span>      指定配置文件\n  --https                支持开启 https\n  --analyzer             支持开启构建分析\n  --analyzer-port <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> 支持定制构建分析端口\n  --disable-reload       禁用热更新模块\n  --disable-mock         禁用 mock 服务\n  --disable-open         禁止浏览器默认打开行为\n  --disable-assets       禁止 webpack assets 的输出\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="build"><a class="header-anchor" href="#build">#</a> build</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ icejs build --help\n\nUsage: icejs build <span class="token punctuation">[</span>options<span class="token punctuation">]</span>\n\nOptions:\n  --analyzer             同 start\n  --analyzer-port <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> 同 start\n  --config <span class="token operator">&lt;</span>config<span class="token operator">&gt;</span>      同 start\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="工程构建配置"><a class="header-anchor" href="#工程构建配置">#</a> 工程构建配置</h2><p>工程构建相关的配置默认都收敛在项目根目录的 <code>build.json</code>  文件中，配置方式：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;alias&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;publicPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果希望使用 JS 类型的配置文件，则需要在 npm scripts 中指定配置文件：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icejs start --config build.config.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icejs build --config build.config.js&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>build.config.js</code> 中通过 JS 模块的方式指定配置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  define<span class="token operator">:</span> <span class="token punctuation">{</span>\n    env<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">&#39;build-plugin-fusion&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        themePackage<span class="token operator">:</span> <span class="token string">&#39;@icedesign/theme&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      api<span class="token punctuation">.</span><span class="token function">onGetWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>当下支持的基础配置项请参考文档：<a href="/config">配置</a>。</p><h2 id="进阶配置"><a class="header-anchor" href="#进阶配置">#</a> 进阶配置</h2><h3 id="根据环境区分工程配置"><a class="header-anchor" href="#根据环境区分工程配置">#</a> 根据环境区分工程配置</h3>',22),t=(0,e.Uk)("参考 "),l=(0,e.Uk)("区分不同环境"),o=(0,e.Uk)("。"),c=(0,e.Wm)("h3",{id:"如何开启新的-jsx-转换"},[(0,e.Wm)("a",{class:"header-anchor",href:"#如何开启新的-jsx-转换"},"#"),(0,e.Uk)(" 如何开启新的 JSX 转换")],-1),r=(0,e.Uk)("ice.js 1.16.0+ 支持 "),i={href:"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("New JSX Transform"),b=(0,e.Uk)("，开启该能力之后，编写 React 组件时不再需要在头部引入 "),d=(0,e.Wm)("code",null,"React",-1),k=(0,e.Uk)("。"),m=(0,e.uE)('<p>只需要修改 <code>tsconfig.json</code> 中的 <code>compilerOptions.jsx</code> 即可：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>{\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &quot;compilerOptions&quot;: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &quot;jsx&quot;: &quot;react&quot;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &quot;jsx&quot;: &quot;react-jsx&quot;,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>接下来书写组件就不再需要引入 React 了：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import React from &#39;react&#39;;\n</span></span>\nfunction Example() {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return &lt;&gt;Hello&lt;/&gt;;\n</span></span>}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="自定义工程配置"><a class="header-anchor" href="#自定义工程配置">#</a> 自定义工程配置</h2><p>如果基础配置和已有插件都无法支持业务需求，可以通过自定义配置来实现，自定义配置同时也是一个 webpack 插件。</p><p>首先新建 <code>build.plugin.js</code>  文件作为一个自定义插件，然后写入以下代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context<span class="token punctuation">,</span> onGetWebpackConfig <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">onGetWebpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',8),g=(0,e.Uk)("插件内部代码写法可以参考文档 "),h=(0,e.Uk)("通过插件定制工程能力"),f=(0,e.Uk)("。"),v=(0,e.uE)('<p>最后在 <code>build.json</code>  里引入自定义插件即可：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;build-plugin-ice-app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./build.plugin.js&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="调试"><a class="header-anchor" href="#调试">#</a> 调试</h2><p>在某些情况下可能遇到配置没有生效，或者配置不符合预期，这时候我们可以通过下面的命令进行调试，查看最终的 webpack 配置是否符合预期。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 调试开发环境</span>\n$ <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>icejs <span class="token function">npm</span> start\n\n<span class="token comment"># 调试构建环境</span>\n$ <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>icejs <span class="token function">npm</span> run build\n\n<span class="token comment"># 调试构建环境</span>\n$ <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>icejs <span class="token function">npm</span> run <span class="token builtin class-name">test</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',5),j={render:function(n,s){const a=(0,e.up)("RouterLink"),j=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,(0,e.Wm)(a,{to:"/guide/basic/config.html"},{default:(0,e.w5)((()=>[l])),_:1}),o]),c,(0,e.Wm)("p",null,[r,(0,e.Wm)("a",i,[u,(0,e.Wm)(j)]),b,d,k]),m,(0,e.Wm)("p",null,[g,(0,e.Wm)(a,{to:"/plugin/develop/build.html"},{default:(0,e.w5)((()=>[h])),_:1}),f]),v],64)}}}}]);