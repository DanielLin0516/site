(self.webpackChunksite=self.webpackChunksite||[]).push([[5610],{6228:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-1e05b9e8",path:"/guide/advanced/ssr.html",title:"服务端渲染 SSR",lang:"zh-CN",frontmatter:{title:"服务端渲染 SSR",order:2},excerpt:"",headers:[{level:2,title:"开启 SSR",slug:"开启-ssr",children:[]},{level:2,title:"应用级数据",slug:"应用级数据",children:[]},{level:2,title:"页面级数据",slug:"页面级数据",children:[]},{level:2,title:"构建产物",slug:"构建产物",children:[]},{level:2,title:"页面 Meta 标签",slug:"页面-meta-标签",children:[]},{level:2,title:"服务端集成",slug:"服务端集成",children:[]},{level:2,title:"其他问题",slug:"其他问题",children:[{level:3,title:"服务端请求必须使用绝对的 URL 路径",slug:"服务端请求必须使用绝对的-url-路径",children:[]}]}],filePathRelative:"guide/advanced/ssr.md",git:{updatedTime:1621416862e3,contributors:[]}}},5247:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>g});var p=a(6252);const e=(0,p.uE)('<p>icejs 支持服务端渲染（即 SSR）能力，开发者可以按需一键开启 SSR 的模式，相比于传统的客户端渲染，SSR 常用于两个场景：1. 有 SEO 诉求；2. 对首屏渲染速度要求比较高。相比于传统的 SSR 方案，icejs 提供的 SSR 能力具有以下特性：</p><ul><li>支持一键开启/关闭 SSR 能力</li><li>与服务端低耦合，无论是传统的 Nodejs 应用还是 Serverless 模式，都可以非常简单的集成</li><li>支持页面级服务端加载数据</li></ul><h2 id="开启-ssr"><a class="header-anchor" href="#开启-ssr">#</a> 开启 SSR</h2><blockquote><p>注意：icejs@1.1.0 及以上版本开始支持 SSR</p></blockquote><p>在工程配置文件 <code>build.json</code> 中开启 SSR：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;ssr&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>配置完之后即可启用 SSR，同理置为 false 即可关闭 SSR 功能。此时重新执行 <code>npm run start</code> 即可看到页面中直出的 HTML:</p><p><img src="https://img.alicdn.com/tfs/TB1rk9Bzhv1gK0jSZFFXXb0sXXa-2880-1026.png" alt="SSR 效果"></p><h2 id="应用级数据"><a class="header-anchor" href="#应用级数据">#</a> 应用级数据</h2><p>在 <code>src/app.ts</code> 中可通过 <code>getInitialData</code> 获取全局数据：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>import { runApp, request } from &#39;ice&#39;;\n\nconst appConfig = {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  app: {\n</span><span class="token prefix inserted">+</span><span class="token line">    getInitialData: async (ctx) =&gt; {\n</span><span class="token prefix inserted">+</span><span class="token line">      // const data = await request.get(&#39;/api/data&#39;);\n</span><span class="token prefix inserted">+</span><span class="token line">      return {\n</span><span class="token prefix inserted">+</span><span class="token line">       initialStates: {\n</span><span class="token prefix inserted">+</span><span class="token line">         user: { name: &#39;Jack Ma&#39;, id: &#39;01&#39; }\n</span><span class="token prefix inserted">+</span><span class="token line">       }\n</span><span class="token prefix inserted">+</span><span class="token line">      };\n</span><span class="token prefix inserted">+</span><span class="token line">    }\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span>};\n\nrunApp(appConfig);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>开启了 SSR 的行为说明：</p><ul><li>服务端渲染时直接调用 <code>getInitialData</code> 获取数据并渲染应用，同时将数据注入到全局变量中</li><li>浏览器端渲染时不再调用 <code>getInitialData</code>，会直接通过全局变量获取初始数据</li><li>可以获取到当前请求的上下文 <code>ctx</code> 参数，包含以下字段 <ul><li><code>ctx.req</code>：HTTP request 对象 （仅在 server 端输出）</li><li><code>ctx.res</code>：HTTP response 对象 （仅在 server 端输出）</li><li><code>ctx.pathname</code>：当前路由路径</li><li><code>ctx.query</code>：请求参数对象</li><li><code>ctx.path</code>：URL 路径（包括请求参数）</li><li><code>ctx.ssrError</code>：服务端渲染时错误信息（仅在 client 端输出）</li></ul></li></ul><p>未开启 SSR 的行为说明：</p><ul><li>浏览器端会同步调用 <code>getInitialData</code>，调用完成后执行 render 逻辑</li></ul><p><code>getInitialData</code> 返回的 <code>initialData.initialStates</code> 会作为 store 的初始状态，因此 View 里通过 model 拿到的默认 state 即 <code>initialData.initialStates</code>，如 <code>models/user.js</code> 的默认 states 即上出的 <code>{ name: &#39;Jack Ma&#39;, id: &#39;01&#39; }</code>。</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>import { runApp } from &#39;ice&#39;;\n\nconst appConfig = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> app: {\n</span><span class="token prefix unchanged"> </span><span class="token line">   getInitialData: async () =&gt; {}\n</span><span class="token prefix unchanged"> </span><span class="token line"> },\n</span><span class="token prefix unchanged"> </span><span class="token line"> store: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // 参数 initialData 即 getInitialData 返回的数据\n</span><span class="token prefix inserted">+</span><span class="token line">   getInitialStates: (initialData) =&gt; {\n</span><span class="token prefix inserted">+</span><span class="token line">     // 可按需选择需要作为 initialStates 的数据\n</span><span class="token prefix inserted">+</span><span class="token line">     return initialData;\n</span><span class="token prefix inserted">+</span><span class="token line">   }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>};\n\nrunApp(appConfig);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>框架提供了两种方式获取 <code>getInitialData</code> 返回的数据：</p><ul><li>通过 <code>getInitialData</code> API 消费 <code>initialData</code>。</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getInitialData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token function-variable function">default</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取通过 app.getInitialData 返回的 initialData 数据。</span>\n  <span class="token keyword">const</span> initialData <span class="token operator">=</span> <span class="token function">getInitialData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initialData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>通过 store 的 <code>initialStates</code> 来使用消费 <code>initalData</code>，<a href="/docs/guide/basic/store">详见</a>。</li></ul><h2 id="页面级数据"><a class="header-anchor" href="#页面级数据">#</a> 页面级数据</h2><p>SEO 场景下，需要访问每个页面时都能够返回实际的 DOM 节点，此时如果把数据放到全局的 <code>initialData</code> 里管理成本会非常高，因此 icejs 支持页面级通过 <code>getInitialProps</code> 来获取自身需要的数据。</p><blockquote><p>注意：如果只是追求首屏加载速度，不推荐使用页面级的 getInitialProps，因为这在一定程度上会延长服务端渲染直出 HTML 的时间。</p></blockquote><p>在页面级组件中通过 <code>Component.getInitialProps</code> 来获取页面初始数据，同时可以获取到当前请求的上下文 <code>ctx</code> 参数，包含以下字段：</p><ul><li><code>ctx.req</code>：HTTP request 对象 （仅在 server 端输出）</li><li><code>ctx.res</code>：HTTP response 对象 （仅在 server 端输出）</li><li><code>ctx.pathname</code>：当前路由路径</li><li><code>ctx.query</code>：请求参数对象</li><li><code>ctx.path</code>：URL 路径（包括请求参数）</li><li><code>ctx.ssrError</code>：服务端渲染时错误信息（仅在 client 端输出）</li></ul><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>import { request } from &#39;ice&#39;;\n\nfunction Home({ stars }) {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return &lt;div&gt;icejs stars: {stars}&lt;/div&gt;;\n</span></span>}\n\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">Home.getInitialProps = async (ctx) =&gt; {\n</span><span class="token prefix inserted">+</span><span class="token line">  const res = await request.get(&#39;https://api.github.com/repos/ice-lab/icejs&#39;);\n</span><span class="token prefix inserted">+</span><span class="token line">  return { stars: res.data.stargazers_count };\n</span><span class="token prefix inserted">+</span><span class="token line">}\n</span></span>\nexport default Home;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>开启了 SSR 的行为说明：</p><ul><li>服务端渲染时调用对应页面的 <code>getInitialProps</code>，然后在渲染页面组件时将数据作为 props 传递给页面组件，同时将数据注入到全局变量上</li><li>浏览器端渲染时不再调用 <code>getInitialProps</code>，会直接通过全局变量获取初始数据并作为组件的 props</li></ul><p>未开启 SSR 的行为说明：</p><ul><li>浏览器端渲染时会在组件渲染后（didMount）理解调用该方法，同时触发组件的 rerender。</li></ul><h2 id="构建产物"><a class="header-anchor" href="#构建产物">#</a> 构建产物</h2><p>当应用开发完成时，通过运行 <code>npm run build</code> 默认构建后的文件如下：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> .\n</span><span class="token prefix unchanged"> </span><span class="token line"> ├── build\n</span><span class="token prefix unchanged"> </span><span class="token line"> │   ├── index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> │   ├── css/index.css\n</span><span class="token prefix unchanged"> </span><span class="token line"> │   ├── js/index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> │   └── server/index.js // 服务端代码文件\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="页面-meta-标签"><a class="header-anchor" href="#页面-meta-标签">#</a> 页面 Meta 标签</h2><p>在 SEO 场景下，往往需要设置每个页面的标题和 Meta 标签，以更好地让搜索引擎抓取页面内容。使用步骤如下：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// pages/Home/index.jsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Head <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> title<span class="token punctuation">,</span> description <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Head</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>description<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>description<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keywords<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Home Keywords<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Head</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nHome<span class="token punctuation">.</span><span class="token function-variable function">getInitialProps</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 模拟服务端返回 title 和 description 数据</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;/detail&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="服务端集成"><a class="header-anchor" href="#服务端集成">#</a> 服务端集成</h2><p>本地开发时 icejs 通过 webpack-dev-server 做服务端渲染，应用发布后则需要对应的服务端自行渲染，核心逻辑如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nrouter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#39;/*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// server/index.js 路径</span>\n  <span class="token keyword">const</span> serverBundlePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;../build&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;server/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> webStatsPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;../build&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;loadable-stats.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> serverRender <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span>serverBundlePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> html<span class="token punctuation">,</span> error<span class="token punctuation">,</span> redirectUrl <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> serverRender<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">(</span>\n    <span class="token comment">// 当前请求上下文（必选）</span>\n    ctx<span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token comment">// loadable-stats.json 本地路径（必选）</span>\n      loadableStatsPath<span class="token operator">:</span> webStatsPath<span class="token punctuation">,</span>\n      <span class="token comment">// 可选</span>\n      initialData<span class="token operator">:</span> <span class="token punctuation">{</span>\n        initialStates<span class="token operator">:</span> <span class="token punctuation">{</span>\n          user<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// 静态资源的公共路径，默认为 /（可选） </span>\n      publicPath<span class="token operator">:</span> <span class="token string">&#39;https://cdn.com/&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>redirectUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[SSR Redirect]&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Redirect to the new path </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>redirectUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 重定向</span>\n    ctx<span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> redirectUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[SSR ERROR]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;serverRender error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[SSR SUCCESS]&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">output html content\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ctx<span class="token punctuation">.</span>res<span class="token punctuation">.</span>body <span class="token operator">=</span> html<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>',40),t=(0,p.Uk)("icejs@1.15.0 及以上版本开始支持在开启 SSR 的应用中使用"),l={href:"https://ice.work/docs/guide/advance/code-splitting",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("代码分割"),o=(0,p.Uk)("。部署时需要把 "),i=(0,p.Wm)("code",null,"loadable-stats.json",-1),r=(0,p.Uk)(" 、"),u=(0,p.Wm)("code",null,"server/loadable-stats.json",-1),k=(0,p.Uk)(" 和 "),d=(0,p.Wm)("code",null,"server/",-1),b=(0,p.Uk)(" 目录下所有的 bundle 资源下载到 server 端。"),m=(0,p.uE)('<p>icejs 构建出来的 <code>server/index.js</code> 会暴露出 <code>render</code> 方法供服务端调用，该方法提供以下参数：</p><ul><li><p>ctx: 必填，当前请求上下文</p></li><li><p>options:</p><ul><li><p>loadableStatsPath: 必填，loadable-stats.json 本地路径</p></li><li><p>publicPath: 选填，静态资源的公共路径，默认为 <code>/</code></p></li><li><p>htmlTemplate: 选填，html 模板内容</p></li><li><p>initialData: 选填，如果不填写，服务端则会调用前端声明的 <code>getInitialData</code> 方法，但如果<strong>对性能追求比较极致</strong>，服务端则可以自行获取对应数据并通过 <code>initialData</code> 传入。（调用前端的 getInitialData 一般会发起 HTTP 请求，但是服务端有可能通过缓存/数据库来查询，速度会快一点）</p></li></ul></li></ul><p>以上即 icejs SSR 能力的使用说明，如遇到相关问题，欢迎给我们提 issue。</p><h2 id="其他问题"><a class="header-anchor" href="#其他问题">#</a> 其他问题</h2><h3 id="服务端请求必须使用绝对的-url-路径"><a class="header-anchor" href="#服务端请求必须使用绝对的-url-路径">#</a> 服务端请求必须使用绝对的 URL 路径</h3><p>开启了 SSR 之后，<code>app.getInitialData</code> 以及 <code>Home.getInitialProps</code> 都会在服务端下执行，服务端发请求必须用绝对路径不能用相对路径，因此这两个方法里如果出现异步请求，请务必使用绝对路径，或者正确设置 <code>request.baseURL</code>。推荐做法：</p><p><code>src/config.js</code> 中动态区分环境并配置 baseURL：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>__IS_SERVER__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 动态扩展环境：服务端通过环境变量区分，此处以 Midway 为例</span>\n  global<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MIDWAY_SERVER_ENV</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 动态扩展环境：两种方式</span>\n  \n  <span class="token comment">// 方式 1. 通过服务端输出的全局变量</span>\n  window<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> window<span class="token punctuation">.</span>g_config<span class="token punctuation">.</span>faasEnv<span class="token punctuation">;</span>\n  \n  <span class="token comment">// 方式 2. 通过 url 地址动态判断 </span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">pre.example.com</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">daily.example.com</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> <span class="token string">&#39;daily&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">example.com</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> <span class="token string">&#39;prod&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>__app_mode__ <span class="token operator">=</span> <span class="token string">&#39;local&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  local<span class="token operator">:</span> <span class="token punctuation">{</span>\n    baseURL<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SERVER_PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  daily<span class="token operator">:</span> <span class="token punctuation">{</span>\n    baseURL<span class="token operator">:</span> <span class="token string">&#39;https://ice-ssr.daily.fx.alibaba.net&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pre<span class="token operator">:</span> <span class="token punctuation">{</span>\n    baseURL<span class="token operator">:</span> <span class="token string">&#39;https://ice-ssr.pre-fx.alibaba-inc.com&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  prod<span class="token operator">:</span> <span class="token punctuation">{</span>\n    baseURL<span class="token operator">:</span> <span class="token string">&#39;https://ice-ssr.fx.alibaba-inc.com&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>然后在 <code>src/app.js</code> 中设置 <code>request.baseURL</code>：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>import { runApp, IAppConfig } from &#39;ice&#39;;\n\nconst appConfig: IAppConfig = {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  request: {\n</span><span class="token prefix inserted">+</span><span class="token line">    baseURL: config.baseURL\n</span><span class="token prefix inserted">+</span><span class="token line">  }\n</span></span>};\n\nrunApp(appConfig);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',10),g={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[t,(0,p.Wm)("a",l,[c,(0,p.Wm)(a)]),o,i,r,u,k,d,b]),m],64)}}}}]);