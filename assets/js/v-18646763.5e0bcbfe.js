(self.webpackChunksite=self.webpackChunksite||[]).push([[4222],{1768:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-18646763",path:"/guide/basic/router.html",title:"路由配置",lang:"zh-CN",frontmatter:{title:"路由配置",order:3},excerpt:"",headers:[{level:2,title:"配置路由信息",slug:"配置路由信息",children:[]},{level:2,title:"运行时配置",slug:"运行时配置",children:[]},{level:2,title:"路由组件参数",slug:"路由组件参数",children:[]},{level:2,title:"路由跳转",slug:"路由跳转",children:[]},{level:2,title:"按需加载",slug:"按需加载",children:[]},{level:2,title:"路由高阶组件",slug:"路由高阶组件",children:[]},{level:2,title:"常见问题",slug:"常见问题",children:[{level:3,title:"HashHistory 与 BrowserHistory",slug:"hashhistory-与-browserhistory",children:[]},{level:3,title:"如何使用 BrowserRouter",slug:"如何使用-browserrouter",children:[]},{level:3,title:"如何使用动态路由",slug:"如何使用动态路由",children:[]}]}],filePathRelative:"guide/basic/router.md",git:{updatedTime:1621351144e3,contributors:[]}}},8874:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>cn});var e=a(6252);const p=(0,e.Uk)("icejs 推荐使用 "),t=(0,e.Wm)("strong",null,"配置式路由",-1),o=(0,e.Uk)(" 进行应用的路由管理，如果希望使用约定式路由可参考 "),r={href:"/docs/guide/advance/convention-routing",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("文档"),c=(0,e.Uk)("。"),u=(0,e.uE)('<h2 id="配置路由信息"><a class="header-anchor" href="#配置路由信息">#</a> 配置路由信息</h2><p>应用的路由信息统一在 <code>src/routes.ts</code> 中配置，配置协议支持多级嵌套，具体如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> UserLayout <span class="token keyword">from</span> <span class="token string">&#39;@/Layouts/UserLayout&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> UserLogin <span class="token keyword">from</span> <span class="token string">&#39;@/pages/UserLogin&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> NotFound <span class="token keyword">from</span> <span class="token string">&#39;@/components/NotFound&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> wrapperPage <span class="token keyword">from</span> <span class="token string">&#39;@/components/WrapperPage&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> routerConfig <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// 分组路由，children 里的路由会将父节点的 component 作为布局组件</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> UserLayout<span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 路由路径</span>\n        path<span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span>\n        <span class="token comment">// 精确匹配</span>\n        exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token comment">// 路由组件</span>\n        component<span class="token operator">:</span> UserLogin<span class="token punctuation">,</span>\n        <span class="token comment">// 配置路由的高阶组件</span>\n        wrappers<span class="token operator">:</span> <span class="token punctuation">[</span>wrapperPage<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n        <span class="token comment">// 重定向</span>\n        redirect<span class="token operator">:</span> <span class="token string">&#39;/user/login&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 404 没有匹配到的路由</span>\n        component<span class="token operator">:</span> NotFound<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 非分组路由</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> About<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> routerConfig<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><blockquote><p>注意：路由有一个按顺序匹配的规则，从上到下一旦命中路由匹配规则就会停止遍历，因此如果你在最前面配置了 / 这样一个路由，则所有的路由都会命中该规则，导致其他路由没有效果，所以在开发时要注意路由的顺序以及 exact 属性的使用。</p></blockquote><h2 id="运行时配置"><a class="header-anchor" href="#运行时配置">#</a> 运行时配置</h2><p>在 <code>src/app.ts</code> 中，我们可以配置路由的类型和基础路径等信息，具体配置如下：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> runApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> appConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  router<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;browser&#39;</span><span class="token punctuation">,</span>\n    basename<span class="token operator">:</span> <span class="token string">&#39;/seller&#39;</span><span class="token punctuation">,</span>\n    fallback<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token function-variable function">modifyRoutes</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">routes</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> routes<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">runApp</span><span class="token punctuation">(</span>appConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>options</strong>:</p>',8),i=(0,e.Wm)("li",null,[(0,e.Uk)("type: 路由类型，默认值 "),(0,e.Wm)("code",null,"hash"),(0,e.Uk)("，可选值 "),(0,e.Wm)("code",null,"browser|hash|static")],-1),k=(0,e.Wm)("li",null,"basename: 路由基准地址",-1),b=(0,e.Wm)("li",null,"fallback: 开启按需加载时配置 fallback UI",-1),m=(0,e.Wm)("li",null,"modifyRoutes: 动态修改路由",-1),d=(0,e.Uk)("history: 自定义创建 history 对象，"),h={href:"https://github.com/ReactTraining/history/blob/master/docs/getting-started.md",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("详见"),f=(0,e.Wm)("h2",{id:"路由组件参数"},[(0,e.Wm)("a",{class:"header-anchor",href:"#路由组件参数"},"#"),(0,e.Uk)(" 路由组件参数")],-1),W=(0,e.Wm)("p",null,[(0,e.Uk)("对于路由组件（即页面级组件），可通过 "),(0,e.Wm)("code",null,"props"),(0,e.Uk)(" 获取到如下属性：")],-1),y=(0,e.Wm)("li",null,[(0,e.Wm)("code",null,"location"),(0,e.Uk)("：当前路由的 location 对象，包含 "),(0,e.Wm)("code",null,"pathname"),(0,e.Uk)("、"),(0,e.Wm)("code",null,"search"),(0,e.Uk)("、"),(0,e.Wm)("code",null,"hash"),(0,e.Uk)("、"),(0,e.Wm)("code",null,"state"),(0,e.Uk)(" 属性")],-1),w=(0,e.Wm)("code",null,"history",-1),U=(0,e.Uk)("：详见 "),v={href:"/docs/guide/basic/api#history",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("history api"),A=(0,e.Wm)("code",null,"searchParams",-1),R=(0,e.Uk)("：当前 URL 的查询参数对象（需要开启 "),H={href:"/docs/guide/basic/app#%E5%90%AF%E5%8A%A8%E9%A1%B9%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"},L=(0,e.Uk)("parseSearchParams"),E=(0,e.Uk)("）"),P=(0,e.Wm)("li",null,[(0,e.Wm)("code",null,"match"),(0,e.Uk)("：当前路由和 URL match 后的对象，包含 "),(0,e.Wm)("code",null,"path"),(0,e.Uk)("、"),(0,e.Wm)("code",null,"url"),(0,e.Uk)("、"),(0,e.Wm)("code",null,"params"),(0,e.Uk)("、"),(0,e.Wm)("code",null,"isExact"),(0,e.Uk)(" 属性")],-1),C=(0,e.Uk)("对于非路由组件，组件内如想获取上述属性需要借助 "),_={href:"/docs/guide/basic/api#withRouter",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("withRouter"),B=(0,e.Uk)(" API。"),q=(0,e.Wm)("h2",{id:"路由跳转"},[(0,e.Wm)("a",{class:"header-anchor",href:"#路由跳转"},"#"),(0,e.Uk)(" 路由跳转")],-1),j=(0,e.Uk)("React 组件内部：使用 "),F={href:"/docs/guide/basic/api#Link",target:"_blank",rel:"noopener noreferrer"},z=(0,e.Uk)("Link 组件"),N=(0,e.Uk)(" 或 "),D={href:"/docs/guide/basic/api#useHistory",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("useHistory"),O=(0,e.Uk)(" API"),S=(0,e.Uk)("非 React 组件内部：使用 "),Y={href:"/docs/guide/basic/api#history",target:"_blank",rel:"noopener noreferrer"},G=(0,e.Uk)("history API"),J=(0,e.Wm)("h2",{id:"按需加载"},[(0,e.Wm)("a",{class:"header-anchor",href:"#按需加载"},"#"),(0,e.Uk)(" 按需加载")],-1),K=(0,e.Uk)("参考 "),M={href:"/docs/guide/advance/code-splitting",target:"_blank",rel:"noopener noreferrer"},Q=(0,e.Uk)("代码分割"),V=(0,e.Uk)(" 。"),X=(0,e.uE)('<h2 id="路由高阶组件"><a class="header-anchor" href="#路由高阶组件">#</a> 路由高阶组件</h2><p>通过 <code>src/routes.ts</code> 中的 <code>wrappers</code> 字段可配置路由的高阶组件，常用于路由级别的权限检验。</p><h4 id="配置-wrappers"><a class="header-anchor" href="#配置-wrappers">#</a> 配置 wrappers</h4><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import WrapperPage from &#39;@/components/WrapperPage&#39;;\n</span></span>\nconst routerConfig = [\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> {\n</span><span class="token prefix unchanged"> </span><span class="token line">   path: &#39;/user&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   component: User,\n</span><span class="token prefix unchanged"> </span><span class="token line">   // 配置路由的高阶组件\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    wrappers: [WrapperPage]\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> },\n</span></span>]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>注意：Wrapper 组件不支持通过 lazy 导入</p></blockquote><h4 id="实现高阶组件"><a class="header-anchor" href="#实现高阶组件">#</a> 实现高阶组件</h4><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token comment">// src/components/LoginWrapper</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useAuth<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">LoginWrapper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">Wrapped</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>auth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span>\n          auth<span class="token punctuation">.</span>isLogin <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Redirect</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> Wrapped<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> LoginWrapper<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>通过 <code>wrappers</code> 配置我们可以对路由组件进行自定义包装，如上示例通过 WrapperPage 高阶组件对路由组件进行权限判断，如果是登录状态，则渲染 User 组件，否则跳转到 <code>/login</code> 路由。</p>',8),Z=(0,e.Wm)("code",null,"useAuth",-1),$=(0,e.Uk)(" API 需要结合 plugin-ice-auth 插件实现，可参考 "),nn={href:"/docs/guide/advance/auth",target:"_blank",rel:"noopener noreferrer"},sn=(0,e.Uk)("权限管理"),an=(0,e.Uk)(" 。"),en=(0,e.uE)('<h2 id="常见问题"><a class="header-anchor" href="#常见问题">#</a> 常见问题</h2><h3 id="hashhistory-与-browserhistory"><a class="header-anchor" href="#hashhistory-与-browserhistory">#</a> HashHistory 与 BrowserHistory</h3><p>前端路由通常有两种实现方式：HashHistory 和 BrowserHistory，路由都带着 <code>#</code> 说明使用的是 HashHistory。这两种方式优缺点：</p><table><thead><tr><th>特点\\方案</th><th>HashRouter</th><th>BrowserRouter</th></tr></thead><tbody><tr><td>美观度</td><td>不好，有 # 号</td><td>好</td></tr><tr><td>易用性</td><td>简单</td><td>中等，需要 server 配合</td></tr><tr><td>依赖 server</td><td>不依赖</td><td>依赖</td></tr><tr><td>跟锚点功能冲突</td><td>冲突</td><td>不冲突</td></tr><tr><td>兼容性</td><td>IE8</td><td>IE10</td></tr></tbody></table><p>开发者可以根据自己的实际情况选择对应方案。</p><h3 id="如何使用-browserrouter"><a class="header-anchor" href="#如何使用-browserrouter">#</a> 如何使用 BrowserRouter</h3><p>本地开发时，只需要在 <code>src/app.ts</code> 中增加以下配置即可：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>import { runApp } from &#39;ice&#39;;\n\nconst appConfig = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> router: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    type: &#39;browser&#39;,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>};\n\nrunApp(appConfig);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>线上运行时需要服务端支持，否则会出现刷新 404 问题，具体方案请参考社区文档：</p>',9),pn={href:"https://github.com/LoeiFy/Recordum/issues/15",target:"_blank",rel:"noopener noreferrer"},tn=(0,e.Uk)("关于 react-router 的 browserHistory 模式"),on={href:"https://zzugbb.github.io/passages/react-router%E9%97%AE%E9%A2%98/",target:"_blank",rel:"noopener noreferrer"},rn=(0,e.Uk)("react-router 之 HashRouter & BrowserRouter"),ln=(0,e.uE)('<h3 id="如何使用动态路由"><a class="header-anchor" href="#如何使用动态路由">#</a> 如何使用动态路由</h3><p>在某些场景下可能需要动态指定路由即 <code>/user/:id</code>，使用方式如下：</p><p>路由配置：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> UserInfo <span class="token keyword">from</span> <span class="token string">&#39;@/pages/UserInfo&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// src/routes.ts</span>\n<span class="token keyword">const</span> routerConfig <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span>\n    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> UserInfo<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>动态路由参数：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token function-variable function">default</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// console.log(id) // 123</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',6),cn={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[(0,e.Wm)("p",null,[p,t,o,(0,e.Wm)("a",r,[l,(0,e.Wm)(a)]),c]),u,(0,e.Wm)("ul",null,[i,k,b,m,(0,e.Wm)("li",null,[d,(0,e.Wm)("a",h,[g,(0,e.Wm)(a)])])]),f,W,(0,e.Wm)("ul",null,[y,(0,e.Wm)("li",null,[w,U,(0,e.Wm)("a",v,[x,(0,e.Wm)(a)])]),(0,e.Wm)("li",null,[A,R,(0,e.Wm)("a",H,[L,(0,e.Wm)(a)]),E]),P]),(0,e.Wm)("p",null,[C,(0,e.Wm)("a",_,[I,(0,e.Wm)(a)]),B]),q,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[j,(0,e.Wm)("a",F,[z,(0,e.Wm)(a)]),N,(0,e.Wm)("a",D,[T,(0,e.Wm)(a)]),O]),(0,e.Wm)("li",null,[S,(0,e.Wm)("a",Y,[G,(0,e.Wm)(a)])])]),J,(0,e.Wm)("p",null,[K,(0,e.Wm)("a",M,[Q,(0,e.Wm)(a)]),V]),X,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[Z,$,(0,e.Wm)("a",nn,[sn,(0,e.Wm)(a)]),an])]),en,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",pn,[tn,(0,e.Wm)(a)])]),(0,e.Wm)("li",null,[(0,e.Wm)("a",on,[rn,(0,e.Wm)(a)])])]),ln],64)}}}}]);