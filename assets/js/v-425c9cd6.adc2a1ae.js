(self.webpackChunksite=self.webpackChunksite||[]).push([[403],{9506:(e,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>n});const n={key:"v-425c9cd6",path:"/material/reference/custom.html",title:"自定义物料模版",lang:"zh-CN",frontmatter:{title:"自定义物料模版",order:5},excerpt:"",headers:[{level:2,title:"已支持模板",slug:"已支持模板",children:[]},{level:2,title:"开发自定义物料模板",slug:"开发自定义物料模板",children:[{level:3,title:"物料模版的目录结构",slug:"物料模版的目录结构",children:[]},{level:3,title:"package.json",slug:"package-json",children:[]},{level:3,title:"模板文件",slug:"模板文件",children:[]},{level:3,title:"模板语法",slug:"模板语法",children:[]},{level:3,title:"特殊文件名称约定",slug:"特殊文件名称约定",children:[]}]},{level:2,title:"如何使用物料模版",slug:"如何使用物料模版",children:[]}],filePathRelative:"material/reference/custom.md",git:{updatedTime:1621333997e3,contributors:[]}}},6234:(e,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>v});var n=s(6252);const t=(0,n.uE)('<p>iceworks 初始化物料项目时可以选择一些内置的模板，同样也可以使用/开发自定义的模板。</p><h2 id="已支持模板"><a class="header-anchor" href="#已支持模板">#</a> 已支持模板</h2><p>目前，基于 iceworks 可以使用的物料模板列表如下：</p><table><thead><tr><th>模板 npm 包名</th><th>是否内置</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>@icedesign/ice-react-ts-material-template</td><td>是</td><td>React+TypeScript</td><td></td></tr><tr><td>@icedesign/ice-react-material-template</td><td>是</td><td>React+JavaScript</td><td></td></tr><tr><td>@icedesign/ice-vue-material-template</td><td>是</td><td>Vue</td><td>暂不支持业务组件</td></tr><tr><td>@icedesign/rax-template</td><td>是</td><td>Rax+TypeScript</td><td></td></tr><tr><td>@icedesign/template-rax-js</td><td>否</td><td>Rax+JavaScript</td><td></td></tr><tr><td>@icedesign/material-chart-template</td><td>否</td><td>React+图表</td><td>仅支持业务组件开发</td></tr></tbody></table><p>对于 CLI init 时没有询问的模板，可以通过 <code>iceworks init material @icedesign/material-chart-template</code> 的方式自定义模板名称。</p><h2 id="开发自定义物料模板"><a class="header-anchor" href="#开发自定义物料模板">#</a> 开发自定义物料模板</h2>',6),c=(0,n.Uk)("当以上这些物料模版不满足开发者需求时，可以开发自定义的物料模版。"),l=(0,n.Wm)("strong",null,"但是我们非常不推荐开发者自定义模板",-1),p=(0,n.Uk)("，因为这会带来非常严重的碎片化版本的问题，如果有此需求的话一定要跟飞冰团队沟通，一方面确认自定义的必要性，另一方面我们希望模板能统一维护与迭代，尽量将自定义模板贡献到"),o={href:"https://github.com/ice-lab/material-templates/",target:"_blank",rel:"noopener noreferrer"},r=(0,n.Uk)("官方模板列表"),i=(0,n.Uk)("里，我们非常欢迎社区共建。"),d=(0,n.uE)('<h3 id="物料模版的目录结构"><a class="header-anchor" href="#物料模版的目录结构">#</a> 物料模版的目录结构</h3><p>一套物料包含组件、区块和项目四种不同类型的物料，因此物料模版的物料结构应该按以下规则设置：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">.</span>\n├── README.md       // 物料模版文档\n├── package.json\n└── template        // 模版目录\n    ├── block       // 区块模版\n    ├── component   // 组件模版\n    └── scaffold    // 项目模版\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="package-json"><a class="header-anchor" href="#package-json">#</a> package.json</h3><p>物料模版的 <code>package.json</code> 里包含一个新的字段 <code>materialConfig</code>，这里需要指定一个 <code>type</code> 字段：</p><ul><li>type: 字符串，指定当前物料模版的前端框架类型 eg: &#39;react&#39;, &#39;vue&#39;, &#39;angular&#39;</li></ul><h3 id="模板文件"><a class="header-anchor" href="#模板文件">#</a> 模板文件</h3><p>物料模版 <code>template/</code> 目录下包含 <code>block</code>、<code>component</code>，<code>page</code> 和 <code>scaffold</code> 四个子目录，它们即物料的模版文件，iceworks 获取到物料模版后，也是根据这四个文件生成对应的区块、组件和项目代码。</p><h3 id="模板语法"><a class="header-anchor" href="#模板语法">#</a> 模板语法</h3>',9),m=(0,n.Uk)("在 iceworks 执行 "),u=(0,n.Wm)("code",null,"init",-1),k=(0,n.Uk)(" 命令时，iceworks 会根据用户输入生成初始代码。这是因为在物料模版中，我们使用了 "),h={href:"https://ejs.co/",target:"_blank",rel:"noopener noreferrer"},b=(0,n.Uk)("ejs"),g=(0,n.Uk)(" 语法将用户输入注入到模版中，再渲染生成初始代码。以官方 React 模版为例，以下是组件模版的模版代码："),f=(0,n.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// https://github.com/alibaba/ice/blob/master/templates/ice-react-material-template/template/component/src/index.js</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> className <span class="token operator">%</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> displayName <span class="token operator">=</span> <span class="token string">&#39;&lt;%= className %&gt;&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;&lt;%= name %&gt;&quot;</span><span class="token operator">&gt;</span>Hello <span class="token operator">&lt;</span><span class="token operator">%=</span> className <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>iceworks 下载物料模版后，会遍历模版文件，按 ejs 语法重新生成初始代码，这意味着开发者可以在模版的任意文件中使用 ejs 语法编写物料模版（markdown、js、scss etc）。</p><p>iceworks 根据用户输入，提供了以下变量供物料模版开发者使用：</p><ul><li><code>title</code>：用户输入的 title，一般用于 README 标题</li><li><code>className</code>：首字母大写的驼峰式组件名，eg：ProfileCard</li><li><code>name</code>：kebab case 模式的组件名称，eg：profile-card</li><li><code>npmName</code>：scope + 物料名 + 组件名，eg：custom-material-profile-card</li><li><code>description</code>：用户输入的描述</li><li><code>version</code>：用户输入的版本号</li><li><code>adaptor</code>：用户输入的 adaptor（true or false）</li><li><code>category</code>：用户输入的分类</li><li><code>registry</code>：npm 源地址</li><li><code>materialConfig</code>：物料模版的 <code>package.json</code> 中定义的配置</li></ul><h3 id="特殊文件名称约定"><a class="header-anchor" href="#特殊文件名称约定">#</a> 特殊文件名称约定</h3><p>在 <code>block</code>、<code>component</code>、<code>page</code> 和 <code>scaffold</code> 三个目录下，是没有 <code>package.json</code> 的，但有一个 <code>_package.json</code> 文件，这个 <code>_package.json</code> 即物料的 <code>package.json</code> 模版，在文件内部同样使用以上 ejs 语法。使用下划线前缀的主要目的是与 npm package.json 区分，以免安装时被 npm 解析。</p><p><code>_gitignore</code> 则在物料被使用时被解析为 <code>.gitignore</code> 文件，在 iceworks 中并不处理。</p><h2 id="如何使用物料模版"><a class="header-anchor" href="#如何使用物料模版">#</a> 如何使用物料模版</h2><p>物料模版开发完成后，需要发布到 npm 之后才可使用。发布后，执行 init 命令时通过参数指定物料模版即可。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 通过 npm 包</span>\n$ iceworks init material my-material-template\n<span class="token comment"># 通过相对路径</span>\n$ iceworks init material <span class="token punctuation">..</span>/ice-chart-template\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',10),v={render:function(e,a){const s=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[t,(0,n.Wm)("p",null,[c,l,p,(0,n.Wm)("a",o,[r,(0,n.Wm)(s)]),i]),d,(0,n.Wm)("p",null,[m,u,k,(0,n.Wm)("a",h,[b,(0,n.Wm)(s)]),g]),f],64)}}}}]);