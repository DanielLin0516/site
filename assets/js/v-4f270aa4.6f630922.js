(self.webpackChunksite=self.webpackChunksite||[]).push([[9453],{3394:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-4f270aa4",path:"/guide/advanced/convention-routing.html",title:"约定式路由",lang:"zh-CN",frontmatter:{title:"约定式路由",order:10},excerpt:"",headers:[{level:2,title:"约定式路由",slug:"约定式路由",children:[{level:3,title:"基础路由",slug:"基础路由",children:[]},{level:3,title:"404 路由",slug:"_404-路由",children:[]},{level:3,title:"index 路由",slug:"index-路由",children:[]},{level:3,title:"嵌套路由",slug:"嵌套路由",children:[]},{level:3,title:"动态路由",slug:"动态路由",children:[]},{level:3,title:"全局 Layout",slug:"全局-layout",children:[]}]},{level:2,title:"路由配置",slug:"路由配置",children:[{level:3,title:"运行时配置",slug:"运行时配置",children:[]},{level:3,title:"构建配置",slug:"构建配置",children:[]}]}],filePathRelative:"guide/advanced/convention-routing.md",git:{updatedTime:1621332393e3,contributors:[]}}},4418:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<p>icejs 推荐使用 <strong>配置式路由</strong> 进行路由管理。但同时也支持 <strong>约定式路由</strong> 方案，当项目中存在 <code>src/routes.[ts|js]</code> 文件时，则使用配置式路由，否则使用约定式路由。</p><blockquote><p>注意：路由文件格式请与 <code>src/app.[ts|js]</code> 保持一致，如应用入口为 <code>src/app.js</code>，那么路由文件应该为 <code>routes.js</code>，如果文件名格式不一致则会进入到约定式路由的逻辑中。</p></blockquote><h2 id="约定式路由"><a class="header-anchor" href="#约定式路由">#</a> 约定式路由</h2><p>顾名思义，约定式路由会根据项目的目录结构自动生成路由配置，无需开发者手动配置。约定式路由虽然不需要用户手动配置，但因为路由配置本身存在很多规则，因此约定式路由也需要约定一系列的目录结构设计，这本身也有一定的学习成本。</p><h3 id="基础路由"><a class="header-anchor" href="#基础路由">#</a> 基础路由</h3><p>假设 pages 的目录结构如下：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>src/pages\n└── About\n    └── index.tsx\n└── Dashboard\n    ├── a.tsx\n    └── b.tsx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>那么，框架自动生成的路由配置如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>\n    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> PageAbout\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/dashboard/a&#39;</span><span class="token punctuation">,</span>\n    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> PageDashboardA\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/dashboard/b&#39;</span><span class="token punctuation">,</span>\n    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> PageDashboardB\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_404-路由"><a class="header-anchor" href="#_404-路由">#</a> 404 路由</h3><p>如果 <code>src/pages/404.[jsx|tsx]</code> 或者 <code>src/pages/404/index.[jsx|tsx]</code> 文件存在，则将它作为 404 页面</p><h3 id="index-路由"><a class="header-anchor" href="#index-路由">#</a> index 路由</h3><p>如果 <code>src/pages/index.[jsx|tsx]</code> 文件存在，则会自动映射到 <code>/</code> 的路由。</p><h3 id="嵌套路由"><a class="header-anchor" href="#嵌套路由">#</a> 嵌套路由</h3><p>框架约定页面目录下存在名为 <code>_layout.[jsx|tsx]</code> 时，会产生一个嵌套路由，当前目录和子目录均为子路由。</p><p>假设 pages 的目录结构如下：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>src/pages\n└── About\n    ├── _layout.tsx\n    ├── a.tsx\n    └── b.tsx\n└── Dashboard\n    └── index.tsx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>那么，框架自动生成的路由配置如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>\n    exact<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> LayoutAbout<span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&#39;/a&#39;</span><span class="token punctuation">,</span>\n        exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        component<span class="token operator">:</span> PageAboutA\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span>\n        exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        component<span class="token operator">:</span> PageAboutB\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">,</span>\n    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> PageDashboard\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="动态路由"><a class="header-anchor" href="#动态路由">#</a> 动态路由</h3><p>框架约定定义带参数的动态路由，需要创建对应的以下划线作为前缀的文件或目录。</p><ul><li>路径中 <code>$</code> 作为文件夹或文件名的首个字符，标识一个动态路由，如 <code>src/pages/app/$uid.tsx</code> 会生成路由 <code>/app/:uid</code></li><li>路径中文件夹或文件名的首个和最后一个字符同时为 <code>$</code>，标识一个可选的动态路由，如 <code>src/pages/app/$uid$.tsx</code> 会生成路由 <code>/app/:uid?</code></li></ul><p>假设 pages 的目录结构如下：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>src/pages\n└── repo\n    ├── $pid.tsx\n    └── index.tsx\n└── $uid$.tsx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>那么，框架自动生成的路由配置如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/repo/:pid&#39;</span><span class="token punctuation">,</span>\n    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> PageRepo$pid\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/repo&#39;</span><span class="token punctuation">,</span>\n    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> PageRepo\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/:uid?&#39;</span><span class="token punctuation">,</span>\n    exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> Page$uid$\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="全局-layout"><a class="header-anchor" href="#全局-layout">#</a> 全局 Layout</h3><p>如果 <code>src/layouts/index.[jsx|tsx]</code> 文件存在，则将它默认作为全局 layout</p><h2 id="路由配置"><a class="header-anchor" href="#路由配置">#</a> 路由配置</h2><h3 id="运行时配置"><a class="header-anchor" href="#运行时配置">#</a> 运行时配置</h3><p><a href="/docs/guide/basic/router#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%85%8D%E7%BD%AE">详见</a></p><h3 id="构建配置"><a class="header-anchor" href="#构建配置">#</a> 构建配置</h3><p>在 <code>build.json</code> 中，我们也可以自定义一些构建配置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;router&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...options</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>options</strong>:</p><ul><li><strong>configPath</strong>: 仅配置式路由，类型 <code>string</code>，默认值 <code>&#39;src/routes.[t|j]s&#39;</code>，自定义配置式路由文件的地址</li><li><strong>caseSensitive</strong>: 仅约定式路由，类型 <code>boolean</code>，默认值 <code>false</code>， 根据文件名转换为路由时是否大小写敏感</li><li><strong>ignoreRoutes</strong>: 仅约定式路由，类型 <code>string[]</code>，默认值 <code>[]</code>，忽略指定路由的生成</li><li><strong>ignorePaths</strong>: 仅约定式路由，类型 <code>string[]</code>，默认值 <code>[&#39;components&#39;]</code>，生成路由时忽略指定目录</li></ul>',36),p={render:function(n,s){return e}}}}]);