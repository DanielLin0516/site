(self.webpackChunksite=self.webpackChunksite||[]).push([[3262],{8593:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-7253c196",path:"/guide/basic/style.html",title:"样式方案",lang:"zh-CN",frontmatter:{title:"样式方案",order:10},excerpt:"",headers:[{level:2,title:"全局样式",slug:"全局样式",children:[]},{level:2,title:"局部样式",slug:"局部样式",children:[]},{level:2,title:"常见问题",slug:"常见问题",children:[{level:3,title:"如何全局覆盖基础组件（next/antd）样式？",slug:"如何全局覆盖基础组件-next-antd-样式",children:[]},{level:3,title:"如何局部覆盖基础组件样式？",slug:"如何局部覆盖基础组件样式",children:[]}]}],filePathRelative:"guide/basic/style.md",git:{updatedTime:1621332393e3,contributors:[]}}},3974:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>m});var e=a(6252);const p=(0,e.Uk)("icejs 在工程能力上基本支持了所有社区主流样式方案，包括 Sass、Less、CSS Modules、Stylus 等方案，而作为框架配套的模板我们推荐使用 "),t={href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("CSS Modules"),c=(0,e.Uk)(" 方案。"),o=(0,e.uE)('<h2 id="全局样式"><a class="header-anchor" href="#全局样式">#</a> 全局样式</h2><p>对于整个项目的全局样式，统一定义在 <code>src/global.[scss|less|scss]</code> 文件中，框架会默认引入该文件：</p><div class="language-scss ext-scss line-numbers-mode"><pre class="language-scss"><code><span class="token comment">// 引入默认全局样式</span>\n<span class="token keyword">@import</span> <span class="token string">&#39;@alifd/next/reset.scss&#39;</span><span class="token punctuation">;</span>\n\n<span class="token selector">body </span><span class="token punctuation">{</span>\n  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="局部样式"><a class="header-anchor" href="#局部样式">#</a> 局部样式</h2><p>对于页面级和组件级的样式，我们推荐使用 CSS Modules 的方案，这能很好的解决样式开发中的两个痛点问题：</p><ul><li><strong>全局污染</strong>：CSS 使用全局选择器机制来设置样式，优点是方便重写样式。缺点是所有的样式都是全局生效，样式可能被错误覆盖，因此产生了非常丑陋的 <code>!important</code>，甚至 inline <code>!important</code> 等问题。</li><li><strong>命名混乱</strong>：由于全局污染的问题，多人协同开发时为了避免样式冲突，选择器越来越复杂，容易形成不同的命名风格，很难统一，样式变多后，命名将更加混乱。</li></ul><p>具体规范规则如下：</p><ul><li>文件名：约定文件名格式如 <code>xxx.module.scss</code></li><li>模块化：一个页面或者一个组件对应一个样式文件</li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>Home\n├── index.module.scss\n└── index.tsx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在页面目录下新建 <code>index.jsx</code> 和 <code>index.module.scss</code> 两个文件：</p><div class="language-scss ext-scss line-numbers-mode"><pre class="language-scss"><code><span class="token comment">// ./pages/Home/index.module.scss</span>\n<span class="token selector">.container </span><span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 也可通过 :global 定义全局样式 */</span>\n<span class="token selector">:global </span><span class="token punctuation">{</span>\n  <span class="token selector">.container </span><span class="token punctuation">{</span>\n    <span class="token selector">a </span><span class="token punctuation">{</span>\n      <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在文件中引入对应的样式文件，并将 <code>className</code> 与对应样式关联：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ./pages/Home/index.jsx</span>\n<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./index.module.scss&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span><span class="token constant">CSS</span> Modules<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用该方案之后，上文中的 className 都会被编译为唯一性的名字，避免因为重名 className 而产生样式冲突，如果在浏览器里查看这个示例的 dom 结构，你会发现实际渲染出来是这样的：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container--1DTudAN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>更多 CSS Modules 文档请参考：</p>',16),u={href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("css-modules 官方文档"),i={href:"https://zhuanlan.zhihu.com/p/20495964",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("CSS Modules 详解及 React 中实践"),b=(0,e.uE)('<h2 id="常见问题"><a class="header-anchor" href="#常见问题">#</a> 常见问题</h2><h3 id="如何全局覆盖基础组件-next-antd-样式"><a class="header-anchor" href="#如何全局覆盖基础组件-next-antd-样式">#</a> 如何全局覆盖基础组件（next/antd）样式？</h3><p>next/antd 都支持了一些定制样式的能力，如果这些能力不能满足诉求则可以通过样式覆盖的方式定制：</p><div class="language-scss ext-scss line-numbers-mode"><pre class="language-scss"><code><span class="token comment">// src/global.[scss|less]</span>\n\n<span class="token selector">body </span><span class="token punctuation">{</span>\n  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>\n\n  <span class="token comment">// 覆盖 next 组件的样式</span>\n  <span class="token selector">.next-btn </span><span class="token punctuation">{</span>\n    <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>该方式会把项目里所有 Button 组件的 <code>font-size</code> 属性修改掉。</p><h3 id="如何局部覆盖基础组件样式"><a class="header-anchor" href="#如何局部覆盖基础组件样式">#</a> 如何局部覆盖基础组件样式？</h3><p>如果只是想覆盖某个页面/模块里的组件样式，则推荐采用局部覆盖的方式：</p><div class="language-scss ext-scss line-numbers-mode"><pre class="language-scss"><code><span class="token comment">// ./pages/Home/index.module.scss</span>\n<span class="token selector">.home </span><span class="token punctuation">{</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.home :global </span><span class="token punctuation">{</span>\n  <span class="token comment">// 仅修改 .home 下的 button 样式</span>\n  <span class="token selector">.next-btn </span><span class="token punctuation">{</span>\n    <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果组件本身支持 style 属性，也可通过 <code>style</code> 属性修改：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>\n        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize<span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        OK\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',10),m={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[(0,e.Wm)("p",null,[p,(0,e.Wm)("a",t,[l,(0,e.Wm)(a)]),c]),o,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",u,[r,(0,e.Wm)(a)])]),(0,e.Wm)("li",null,[(0,e.Wm)("a",i,[k,(0,e.Wm)(a)])])]),b],64)}}}}]);