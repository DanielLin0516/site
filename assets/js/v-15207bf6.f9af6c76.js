(self.webpackChunksite=self.webpackChunksite||[]).push([[5350],{6721:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-15207bf6",path:"/guide/basic/store.html",title:"状态管理",lang:"zh-CN",frontmatter:{title:"状态管理",order:6},excerpt:"",headers:[{level:2,title:"全局应用状态",slug:"全局应用状态",children:[{level:3,title:"定义 Model",slug:"定义-model",children:[]},{level:3,title:"初始化 Store",slug:"初始化-store",children:[]},{level:3,title:"在 View 中使用模型状态",slug:"在-view-中使用模型状态",children:[]}]},{level:2,title:"页面级状态",slug:"页面级状态",children:[{level:3,title:"嵌套页面",slug:"嵌套页面",children:[]}]},{level:2,title:"参阅资料",slug:"参阅资料",children:[{level:3,title:"设置初始状态",slug:"设置初始状态",children:[]},{level:3,title:"TypeScript 类型提示",slug:"typescript-类型提示",children:[]},{level:3,title:"model 定义详细说明",slug:"model-定义详细说明",children:[]},{level:3,title:"model 之间通信",slug:"model-之间通信",children:[]},{level:3,title:"获取 effects 的状态 loading/error",slug:"获取-effects-的状态-loading-error",children:[]},{level:3,title:"在 Class Component 中使用",slug:"在-class-component-中使用",children:[]},{level:3,title:"路由切换后重置页面状态",slug:"路由切换后重置页面状态",children:[]},{level:3,title:"Redux Devtools",slug:"redux-devtools",children:[]},{level:3,title:"在其他地方使用 store",slug:"在其他地方使用-store",children:[]}]},{level:2,title:"版本变更说明",slug:"版本变更说明",children:[]}],filePathRelative:"guide/basic/store.md",git:{updatedTime:1621417054e3,contributors:[]}}},6244:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>v});var e=a(6252);const p=(0,e.uE)('<p>icejs 内置了状态管理方案，并在此基础上进一步遵循 <strong>“约定优于配置”</strong> 原则，进行抽象和封装，使得状态管理变得非常容易。</p><h2 id="全局应用状态"><a class="header-anchor" href="#全局应用状态">#</a> 全局应用状态</h2><h3 id="定义-model"><a class="header-anchor" href="#定义-model">#</a> 定义 Model</h3><p>约定全局状态位于 <code>src/models</code> 目录，目录结构如下：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>src\n├── models               // 全局状态\n|   ├── counter.ts\n│   └── user.ts\n└── store.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>假设我们需要全局管理用户状态，定义模型如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/models/user.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 定义 model 的初始 state</span>\n  state<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    id<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 定义改变该模型状态的纯函数</span>\n  reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">update</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>prevState<span class="token punctuation">,</span>\n        <span class="token operator">...</span>payload<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 定义处理该模型副作用的函数</span>\n  <span class="token function-variable function">effects</span><span class="token operator">:</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token keyword">async</span> <span class="token function">getUserInfo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      dispatch<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;taobao&#39;</span><span class="token punctuation">,</span>\n        id<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="初始化-store"><a class="header-anchor" href="#初始化-store">#</a> 初始化 Store</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/store.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">&#39;./models/user&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> project <span class="token keyword">from</span> <span class="token string">&#39;./models/project&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  user<span class="token punctuation">,</span>\n  project<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// options</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>createStore()</code> 支持的 options:</p><ul><li>disableImmer：布尔类型，可选，默认值 false，如果设置为 true，那么 immer 将被禁用，这意味着不能再在 reducers 中直接改变状态，而是必须返回新的状态。</li><li>disableError：布尔类型，可选，默认值 false，如果设置为 true，则 <code>UseModelEffectsError</code> 和 <code>WithModelEffectsError</code> 将不可用。</li><li>disableLoading：布尔类型，可选，默认值 false，如果设置为 true，则 <code>useModelEffectsLoading</code> 和 <code>withModelEffectsLoading</code> 将不可用。</li><li>plugins：数组类型，可选，Redux 插件</li><li>redux：对象类型，可选 <ul><li>middlewares：数组类型，Redux middlewares</li><li>devtoolOptions：对象类型，Redux Devtools 参数</li></ul></li></ul><h3 id="在-view-中使用模型状态"><a class="header-anchor" href="#在-view-中使用模型状态">#</a> 在 View 中使用模型状态</h3><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import store from &#39;@/store&#39;;\n</span></span>\nconst HomePage = () =&gt; {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const [userState, userDispatchers] = store.useModel(&#39;user&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return (\n</span><span class="token prefix unchanged"> </span><span class="token line">   &lt;&gt;\n</span><span class="token prefix unchanged"> </span><span class="token line">     &lt;span&gt;{userState.id}&lt;/span&gt;\n</span><span class="token prefix unchanged"> </span><span class="token line">     &lt;span&gt;{userState.name}&lt;/span&gt;\n</span><span class="token prefix unchanged"> </span><span class="token line">   &lt;/&gt;\n</span><span class="token prefix unchanged"> </span><span class="token line"> );\n</span></span>}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="页面级状态"><a class="header-anchor" href="#页面级状态">#</a> 页面级状态</h2><p>页面状态只能在该页面下的组件中使用，无法跨页面使用。约定页面状态在 <code>src/pages/*/models</code> 中定义。</p><p>目录组织如下：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>src\n├── models                  // 全局状态\n│   └── user.ts\n└── pages\n|   ├── Home                // Home 页面\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">|   │   ├── models          // 页面状态\n</span><span class="token prefix inserted">+</span><span class="token line">|   │   |   ├── foo.ts\n</span><span class="token prefix inserted">+</span><span class="token line">|   │   |   └── bar.ts\n</span><span class="token prefix inserted">+</span><span class="token line">|   │   ├── store.ts\n</span></span>|   │   └── index.tsx\n└── app.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>定义模型如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/pages/Home/models/foo.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  state<span class="token operator">:</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>初始化 Store 实例：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/pages/Home/store.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;./models/foo&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在页面组件中使用模型状态：</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token comment">// 引用页面状态</span>\n<span class="token keyword">import</span> pageStore <span class="token keyword">from</span> <span class="token string">&#39;@/pages/Home/store&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">HomePage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>pageState<span class="token punctuation">,</span> pageDispatchers<span class="token punctuation">]</span> <span class="token operator">=</span> pageStore<span class="token punctuation">.</span><span class="token function">useModel</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>pageState<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">// Hello</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="嵌套页面"><a class="header-anchor" href="#嵌套页面">#</a> 嵌套页面</h3><p>某些复杂场景会出现嵌套页面的情况，即 <code>src/pages/Home</code> 下<strong>包含多个路由页面</strong>，目录组织如下：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>src\n└── pages\n│   ├── Home                 // Home 页面包含了 Foo、Bar 等多个路由页面\n│   │   ├── Foo        \n│   │   ├── Bar\n│   │   ├── Layout           // 页面布局\n│   │   │  └── index.tsx\n│   │   ├── models           // 页面状态\n│   │   │   ├── Foo.ts\n│   │   │   └── Bar.ts\n│   │   └── store.ts\n└── app.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>对于嵌套页面，框架会将 store 的 Provider 包裹在 <code>Layout/index.tsx</code> 上，因此需要保证该文件的存在：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// Layout/index.tsx</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>同时配置在 <code>src/routes.ts</code> 中：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>// src/routes.ts\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import HomeLayout from &#39;@/pages/Home/Layout&#39;;\n</span></span>import Foo from &#39;@/pages/Home/Foo&#39;;\nimport Bar from &#39;@/pages/Home/Bar&#39;;\nimport About from &#39;@/pages/About&#39;;\n\nexport default [\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> {\n</span><span class="token prefix unchanged"> </span><span class="token line">   path: &#39;/&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   component: BasicLayout,\n</span><span class="token prefix unchanged"> </span><span class="token line">   children: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     {\n</span><span class="token prefix unchanged"> </span><span class="token line">       path: &#39;/home&#39;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        component: HomeLayout,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       children: [\n</span><span class="token prefix unchanged"> </span><span class="token line">         {\n</span><span class="token prefix unchanged"> </span><span class="token line">           path: &#39;/foo&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">           component: Foo\n</span><span class="token prefix unchanged"> </span><span class="token line">         }\n</span><span class="token prefix unchanged"> </span><span class="token line">       ]\n</span><span class="token prefix unchanged"> </span><span class="token line">     },\n</span><span class="token prefix unchanged"> </span><span class="token line">     {\n</span><span class="token prefix unchanged"> </span><span class="token line">       path: &#39;/about&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">       component: About,\n</span><span class="token prefix unchanged"> </span><span class="token line">     }\n</span><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="参阅资料"><a class="header-anchor" href="#参阅资料">#</a> 参阅资料</h2><h3 id="设置初始状态"><a class="header-anchor" href="#设置初始状态">#</a> 设置初始状态</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> runApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> appConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  store<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 可选，初始化状态</span>\n    initialStates<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">runApp</span><span class="token punctuation">(</span>appConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>API <code>store.getInitialStates</code> 已废弃，推荐使用 <code>store.initialStates</code></p></blockquote><blockquote><p>SSR 场景下 <code>initialData.initialStates</code> 会默认赋值给 <code>store.initialStates</code></p></blockquote><blockquote><p>页面级状态目前不支持设置 initialStates</p></blockquote><h3 id="typescript-类型提示"><a class="header-anchor" href="#typescript-类型提示">#</a> TypeScript 类型提示</h3><p>编写类型有助于更好的代码提示，类型定义步骤如下：</p><ul><li>创建 Store 实例</li></ul><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>// src/store.ts\nimport { createStore, IStoreModels, IStoreDispatch, IStoreRootState } from &#39;ice&#39;;\nimport user from &#39;./models/user&#39;;\nimport porject from &#39;./models/porject&#39;;\n\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">interface IAppStoreModels extends IStoreModels {\n</span><span class="token prefix inserted">+</span><span class="token line">  user: typeof user;\n</span><span class="token prefix inserted">+</span><span class="token line">  project: typeof project;\n</span><span class="token prefix inserted">+</span><span class="token line">};\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const appModels: IAppStoreModels = {\n</span><span class="token prefix inserted">+</span><span class="token line">  user,\n</span><span class="token prefix inserted">+</span><span class="token line">  project,\n</span><span class="token prefix inserted">+</span><span class="token line">};\n</span></span>\nexport default createStore(appModels);\n\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">export type IRootDispatch = IStoreDispatch&lt;typeof appModels&gt;;\n</span><span class="token prefix inserted">+</span><span class="token line">export type IRootState = IStoreRootState&lt;typeof appModels&gt;;\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>定义状态模型</li></ul><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>// src/models/user.ts\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { IRootState, IRootDispatch } from &#39;@/store&#39;;\n</span></span>\nconst user = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> state: [],\n</span><span class="token prefix unchanged"> </span><span class="token line"> reducers: {},\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  effects: ((dispatch: IRootDispatch) =&gt; ({\n</span><span class="token prefix inserted">+</span><span class="token line">    like(playload, rootState: IRootState) {\n</span><span class="token prefix inserted">+</span><span class="token line">      dispatch.project.foo(payload); // 调用其他 model 的 effects/reducers\n</span><span class="token prefix inserted">+</span><span class="token line">      rootState.project.title;       // 获取其他 model 的 state\n</span><span class="token prefix inserted">+</span><span class="token line">    }\n</span><span class="token prefix inserted">+</span><span class="token line">  })\n</span></span>};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="model-定义详细说明"><a class="header-anchor" href="#model-定义详细说明">#</a> model 定义详细说明</h3><p>如上示例所述，icejs 约定在 <code>src/models</code>、<code>src/pages/*/models</code> 目录下的文件为项目定义的模型文件，每个文件需要默认导出一个对象。</p><p>通常模型定义包括 state、reducers、effects 三部分：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  reducers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  effects<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>state</strong></p><p>model 的初始 state</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>export default {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> state: { count: 0 }\n</span></span>}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>reducers</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>reducers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>一个改变该模型状态的函数集合。这些方法以模型的上一次 prevState 和一个 payload 作为入参，在方法中使用可变的方式来更新状态。这些方法应该是仅依赖于 prevState 和 payload 参数来计算下一个 nextState 的纯函数。对于有副作用的函数，请使用 effects。</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>export default {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> state: { count: 0, list: [] },\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> reducers: {\n</span><span class="token prefix inserted">+</span><span class="token line">   increment (prevState, payload) {\n</span><span class="token prefix inserted">+</span><span class="token line">     // \n</span><span class="token prefix inserted">+</span><span class="token line">     prevState.count += 1;\n</span><span class="token prefix inserted">+</span><span class="token line">     prevState.list.push(1);\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span><span class="token prefix inserted">+</span><span class="token line">   decrement (prevState) {\n</span><span class="token prefix inserted">+</span><span class="token line">     prevState.count += 1;\n</span><span class="token prefix inserted">+</span><span class="token line">   }\n</span><span class="token prefix inserted">+</span><span class="token line"> }\n</span></span>}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>icestore 默认内置了 immer，因此 reducer 中直接修改数据即可，无需返回新对象</p></blockquote><p><strong>effects</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function-variable function">effects</span><span class="token operator">:</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>payload<span class="token punctuation">,</span> rootState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>一个可以处理该模型副作用的函数集合。这些方法以 payload 和 rootState 作为入参，适用于进行异步调用、模型联动等场景。</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>export default {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> state: { count: 0 },\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> reducers: {\n</span><span class="token prefix unchanged"> </span><span class="token line">   increment (prevState, payload) {\n</span><span class="token prefix unchanged"> </span><span class="token line">     prevState.count += 1;\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   decrement (prevState) {\n</span><span class="token prefix unchanged"> </span><span class="token line">     prevState.count -= 1;\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> },\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> effects: (dispatch) =&gt; ({\n</span><span class="token prefix inserted">+</span><span class="token line">   async asyncDecrement() {\n</span><span class="token prefix inserted">+</span><span class="token line">     await delay(1000);             // 进行一些异步操作\n</span><span class="token prefix inserted">+</span><span class="token line">     this.increment();              // 调用模型 reducers 内的方法来更新状态\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span><span class="token prefix inserted">+</span><span class="token line"> }),\n</span></span>};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="model-之间通信"><a class="header-anchor" href="#model-之间通信">#</a> model 之间通信</h3><blockquote><p>注意：如果两个 model 不属于同一个 store 实例，是无法通信的</p></blockquote><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>// src/models/user\nexport default {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> state: {\n</span><span class="token prefix unchanged"> </span><span class="token line">   name: &#39;&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   tasks: 0,\n</span><span class="token prefix unchanged"> </span><span class="token line"> },\n</span><span class="token prefix unchanged"> </span><span class="token line"> effects: () =&gt; ({\n</span><span class="token prefix unchanged"> </span><span class="token line">   async refresh() {\n</span><span class="token prefix unchanged"> </span><span class="token line">     const data = await fetch(&#39;/user&#39;);\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      // 通过 this.foo 调用自身的 reducer\n</span><span class="token prefix inserted">+</span><span class="token line">      this.setState(data);\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> }),\n</span></span>};\n\n// src/models/tasks\nexport default {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> state: [],\n</span><span class="token prefix unchanged"> </span><span class="token line"> effects: (dispatch) =&gt; ({\n</span><span class="token prefix unchanged"> </span><span class="token line">   async refresh() {\n</span><span class="token prefix unchanged"> </span><span class="token line">     const data = await fetch(&#39;/tasks&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line">     this.setState(data);\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   async add(task) {\n</span><span class="token prefix unchanged"> </span><span class="token line">     await fetch(&#39;/tasks/add&#39;, task);\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      // 调用另一个 model user 的 effects\n</span><span class="token prefix inserted">+</span><span class="token line">      await dispatch.user.refresh();\n</span><span class="token prefix inserted">+</span><span class="token line">      // 通过 this.foo 调用自身的 effects\n</span><span class="token prefix inserted">+</span><span class="token line">      await this.refresh();\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> }),\n</span></span>};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>在 effects 里的 action 方法中可以通过 <code>dispatch[model][action]</code> 拿到其他模型所定义的方法。</p>',62),t=(0,e.Uk)("如果遇到 "),l=(0,e.Wm)("code",null,"this.foo",-1),o=(0,e.Uk)(" 的 ts 类型错误，请参考文档 "),c={href:"https://github.com/ice-lab/icestore/blob/master/docs/qna.zh-CN.md",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("icestore QA"),i=(0,e.Uk)(" 进行修复"),u=(0,e.uE)('<blockquote><p>setState 是 icestore 内置的一个 reducer，可以直接使用</p></blockquote><h3 id="获取-effects-的状态-loading-error"><a class="header-anchor" href="#获取-effects-的状态-loading-error">#</a> 获取 effects 的状态 loading/error</h3><p>通过 <code>useModelEffectsState</code> API 即可获取到 effects 的 loading 和 error 状态。</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>import store from &#39;@/store&#39;;\n\nfunction FunctionComponent() {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const [state, dispatchers] = store.useModel(&#39;counter&#39;);\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const effectsState = store.useModelEffectsState(&#39;counter&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> useEffect(() =&gt; {\n</span><span class="token prefix unchanged"> </span><span class="token line">   dispatchers.asyncDecrement();\n</span><span class="token prefix unchanged"> </span><span class="token line"> }, []);\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  console.log(effectsState.asyncDecrement.isLoading); // loading\n</span><span class="token prefix inserted">+</span><span class="token line">  console.log(effectsState.asyncDecrement.error);  // error\n</span></span>}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="在-class-component-中使用"><a class="header-anchor" href="#在-class-component-中使用">#</a> 在 Class Component 中使用</h3><p>useModel 相关的 API 基于 React 的 Hooks 能力，仅能在 Function Component 中使用，通过 <code>withModel</code> API 可以实现在 Class Component 中使用。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;@/store&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> todos <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span> state<span class="token punctuation">,</span> dispatchers <span class="token punctuation">]</span> <span class="token operator">=</span> todos<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">.</span><span class="token function">withModel</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 绑定多个 model</span>\n<span class="token comment">// export default withModel(&#39;user&#39;)(withModel(&#39;todos&#39;)(TodoList));</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>同时，也可以使用 <code>withModelDispatchers</code> 以及 <code>withModelEffectsState</code> API。</p>',8),d={href:"https://github.com/ice-lab/icestore/blob/master/docs/api.md",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("完整 API 文档"),b=(0,e.uE)('<h3 id="路由切换后重置页面状态"><a class="header-anchor" href="#路由切换后重置页面状态">#</a> 路由切换后重置页面状态</h3><p>在 <code>build.json</code> 中开启：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;store&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;resetPageState&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果开发者自行在 <code>store.ts</code> 中初始化 <code>store</code> 实例，需要按照以下规则进行创建：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/pages/Home/store.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 有 models 目录的情况</span>\n<span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">&#39;./models/user&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> project <span class="token keyword">from</span> <span class="token string">&#39;./models/project&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用 model 的文件名作为 model key</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  user<span class="token punctuation">,</span>\n  project<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 有 model.ts 文件的情况</span>\n<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./model&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用 default 作为 model key</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> store <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="redux-devtools"><a class="header-anchor" href="#redux-devtools">#</a> Redux Devtools</h3>',6),m=(0,e.Uk)("icejs 中默认集成了 "),f={href:"https://github.com/zalmoxisus/redux-devtools-extension",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("Redux Devtools"),h=(0,e.Uk)("，不需要额外的配置就可以通过 Redux Devtools 调试："),x=(0,e.uE)('<p><img src="https://img.alicdn.com/tfs/TB1wK4nqypE_u4jSZKbXXbCUVXa-1918-430.png" alt=""></p><p>如果想要定义 Devtools 的参数，可以查看上面 <code>createStore</code> 的 options 说明。</p><h3 id="在其他地方使用-store"><a class="header-anchor" href="#在其他地方使用-store">#</a> 在其他地方使用 store</h3><p>满足以下几种情况，框架都会自动帮助开发者包裹 <code>store.Provider</code>：</p><ul><li>SPA 全局 store：<code>src/</code> 下有 <code>store.js</code> 和 <code>app.js</code></li><li>SPA 页面级 store：<code>src/pages/Home</code> 下有 <code>store.js</code> 和 <code>index.jsx</code></li><li>SPA 嵌套页面级 store：<code>src/pages/Home</code> 下有 <code>store.js</code> 和 <code>Layout/index.jsx</code>（优先级低于上面）</li><li>MPA 组件类型的 entry：<code>src/pages/Home</code> 下有 <code>store.js</code> 和 <code>index.jsx</code></li><li>MPA 单页类型的 entry：<code>src/pages/Home</code> 下有 <code>store.js</code>, <code>app.js</code>, <code>Layout/index.jsx</code></li></ul><p>如果不满足上述情况，则需要开发者自行包裹 <code>store.Provider</code>。比如希望在 <code>src/pages/Home/Foo/</code> 下创建一个 store：</p><ol><li>在 <code>src/pages/Home/Foo/models/</code> 下定义 model</li><li>在 <code>src/pages/Home/Foo/store.ts</code> 中初始化 store</li><li><strong>新增步骤：</strong> 在 <code> src/pages/Home/Foo/index.tsx</code> 中包裹 <code>store.Provider</code></li></ol><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// src/pages/Home/Foo/index.tsx</span>\n<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token operator">=</span> store<span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> actions<span class="token punctuation">]</span> <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">useModel</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="版本变更说明"><a class="header-anchor" href="#版本变更说明">#</a> 版本变更说明</h2><p>icejs@1.9.7 版本开始框架推荐开发者自行初始化 store，这样可以更灵活的定制一些参数，相对之前方案带来的改变：</p><ul><li>开发者需要自行在 store.ts 中初始化 store 实例，框架默认不初始化</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/store.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">&#39;./models/user&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> project <span class="token keyword">from</span> <span class="token string">&#39;./models/project&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  user<span class="token punctuation">,</span>\n  project<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>引入 store 的路径发生了变化：</li></ul><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>// 全局状态\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import { store } from &#39;ice&#39;;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import store from &#39;@/store&#39;;\n</span></span>\n// 页面级状态\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import { store } from &#39;ice/Home&#39;;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import store from &#39;@/pages/Home/store&#39;;\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>对于之前的版本我们做了向前兼容，只有当项目里存在 <code>src/store.ts</code> 或者 <code>src/pages/*/store.ts</code> 时才会触发新的方案，如果之前项目里刚好存在同名文件则有可能触发 break change。</p>',15),v={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[t,l,o,(0,e.Wm)("a",c,[r,(0,e.Wm)(a)]),i])]),u,(0,e.Wm)("p",null,[(0,e.Wm)("a",d,[k,(0,e.Wm)(a)])]),b,(0,e.Wm)("p",null,[m,(0,e.Wm)("a",f,[g,(0,e.Wm)(a)]),h]),x],64)}}}}]);