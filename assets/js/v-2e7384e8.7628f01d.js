(self.webpackChunksite=self.webpackChunksite||[]).push([[8563],{1024:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-2e7384e8",path:"/material/basic/component.html",title:"业务组件开发",lang:"zh-CN",frontmatter:{title:"业务组件开发",order:2},excerpt:"",headers:[{level:2,title:"创建组件",slug:"创建组件",children:[{level:3,title:"物料集合项目",slug:"物料集合项目",children:[]},{level:3,title:"单独的业务组件项目",slug:"单独的业务组件项目",children:[]}]},{level:2,title:"组件开发调试",slug:"组件开发调试",children:[]},{level:2,title:"组件目录",slug:"组件目录",children:[]},{level:2,title:"组件入口",slug:"组件入口",children:[]},{level:2,title:"样式文件",slug:"样式文件",children:[]},{level:2,title:"编写 demo",slug:"编写-demo",children:[]},{level:2,title:"组件文档",slug:"组件文档",children:[]},{level:2,title:"组件工程配置",slug:"组件工程配置",children:[{level:3,title:"alias >1.0.0",slug:"alias-1-0-0",children:[]},{level:3,title:"basicComponents",slug:"basiccomponents",children:[]},{level:3,title:"babelPlugins",slug:"babelplugins",children:[]},{level:3,title:"babelOptions",slug:"babeloptions",children:[]},{level:3,title:"devServer",slug:"devserver",children:[]},{level:3,title:"filename",slug:"filename",children:[]},{level:3,title:"library",slug:"library",children:[]},{level:3,title:"libraryExport",slug:"libraryexport",children:[]},{level:3,title:"libraryTarget",slug:"librarytarget",children:[]},{level:3,title:"sourceMap",slug:"sourcemap",children:[]},{level:3,title:"minify",slug:"minify",children:[]},{level:3,title:"externals",slug:"externals",children:[]},{level:3,title:"subComponents",slug:"subcomponents",children:[]},{level:3,title:"demoTemplate",slug:"demotemplate",children:[]},{level:3,title:"htmlInjection",slug:"htmlinjection",children:[]}]},{level:2,title:"常见问题",slug:"常见问题",children:[{level:3,title:"打包 umd 文件",slug:"打包-umd-文件",children:[]},{level:3,title:"build 目录说明",slug:"build-目录说明",children:[]},{level:3,title:"style.js 文件说明",slug:"style-js-文件说明",children:[]}]}],filePathRelative:"material/basic/component.md",git:{updatedTime:1621351902e3,contributors:[]}}},6213:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>U});var e=a(6252);const l=(0,e.uE)('<h2 id="创建组件"><a class="header-anchor" href="#创建组件">#</a> 创建组件</h2><h3 id="物料集合项目"><a class="header-anchor" href="#物料集合项目">#</a> 物料集合项目</h3><blockquote><p>项目中包含多个业务组件、区块以及模板</p></blockquote><p>物料集合项目初始化后，在根目录通过命令即可新增组件：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> my-materials\n$ iceworks <span class="token function">add</span> component\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="单独的业务组件项目"><a class="header-anchor" href="#单独的业务组件项目">#</a> 单独的业务组件项目</h3><blockquote><p>项目中只包含一个业务组件</p></blockquote><h4 id="通过命令行方式初始化"><a class="header-anchor" href="#通过命令行方式初始化">#</a> 通过命令行方式初始化</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 新建组件文件夹</span>\n$ <span class="token function">mkdir</span> my-component <span class="token operator">&amp;</span> <span class="token builtin class-name">cd</span> my-component\n\n<span class="token comment"># 初始化</span>\n$ iceworks init component\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="通过-def-初始化"><a class="header-anchor" href="#通过-def-初始化">#</a> 通过 DEF 初始化</h4>',10),p=(0,e.Uk)("如果是阿里内部的同学并且想接入 DEF 发布 npm 包，可以参考文档 "),t={href:"https://yuque.alibaba-inc.com/ice/rdy99p/gbekwv",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("组件开发接入 DEF"),o=(0,e.uE)('<h2 id="组件开发调试"><a class="header-anchor" href="#组件开发调试">#</a> 组件开发调试</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> my-component\n$ <span class="token function">npm</span> <span class="token function">install</span>\n$ <span class="token function">npm</span> start\n\n<span class="token comment"># 实时将 src 编译到 lib&amp;es 目录</span>\n$ <span class="token function">npm</span> start -- --watch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="组件目录"><a class="header-anchor" href="#组件目录">#</a> 组件目录</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>├── demo                  # 组件 demo\n│      ├── simple.md\n│      └── usage.md\n├── src                   # 组件源码\n│      ├── index.scss\n│      └── index.js\n├── build.json            # 构建配置\n├── lib/                  # 构建产物，编译为 ES5 的代码\n├── es/                   # 构建产物，编译为 es module 规范的代码\n├── build/                # 构建产物，用于组件文档/demo 预览\n├── README.md\n└── package.json\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="组件入口"><a class="header-anchor" href="#组件入口">#</a> 组件入口</h2><p>组件入口文件为 <code>src/index.js</code>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ExampleComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token operator">...</span>others <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;ExampleComponent&quot;</span> <span class="token punctuation">{</span><span class="token operator">...</span>others<span class="token punctuation">}</span><span class="token operator">&gt;</span>Hello ExampleComponent<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="样式文件"><a class="header-anchor" href="#样式文件">#</a> 样式文件</h2><p>默认生成样式文件为 <code>src/index.scss</code>，根据组件开发需求可以调整为 <code>index.css</code> 或 <code>index.less</code>。</p><blockquote><p>对于业务组件自身依赖的组件，样式无需手动引入，我们会通过工程工具自动引入</p></blockquote><blockquote><p>src/index.js 中无需主动引入 src/index.scss，因为这会引起样式重复打包的问题</p></blockquote><h2 id="编写-demo"><a class="header-anchor" href="#编写-demo">#</a> 编写 demo</h2><p>组件的 demo 演示文件，位于 <code>demo</code> 目录下，使用 <code>yaml-markdown</code> 语法。可以通过修改默认的 <code>usage.md</code> 来调整组件 demo，或通过增加 example.md 文件来创建多个 demo。</p><p>每个 demo 的形式如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>---\ntitle: Simple Usage\norder: 1\n---\n\n本 demo 演示一行文字的用法。\n\n```jsx\nimport React, { Component } from &#39;react&#39;;\nimport ReactDOM from &#39;react-dom&#39;;\nimport ExampleComponent from &#39;@ali/example-component&#39;;\n\nclass App extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;ExampleComponent /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nReactDOM.render((\n  &lt;App /&gt;\n), mountNode);\n```\n\n// 书写 demo 样式\n```css\n.ttt {\n  background: red;\n}\n```\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>如果开发者希望在 js 或者 ts 文件中维护 Demo 中的代码，可以通过约定的组件引入外部的代码：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>---\ntitle: Simple Usage\norder: 1\n---\n\n本 demo 演示一行文字的用法。\n\n```jsx\n&lt;DemoCode src=&quot;path/to/code.js&quot; /&gt;\n```\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>工程上将自动将路径中的源码获取，并展示在 Demo 预览页面中。通过上述的方式开发 Demo 可以享受编辑器带来的代码提示、语法高亮等便捷功能。</p><h2 id="组件文档"><a class="header-anchor" href="#组件文档">#</a> 组件文档</h2><p>在执行 <code>npm run build</code> 时，会通过 <code>demo/</code> 以及 <code>README.md</code> 生成 <code>build/index.html</code>，将 html 进行托管即可完整预览组件的文档。</p>',20),c=(0,e.Uk)("以 "),i=(0,e.Wm)("code",null,"qrcode",-1),u=(0,e.Uk)(" 组件的文档为例，"),b={href:"https://unpkg.com/@icedesign/qrcode@1.0.5/build/index.html",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("文档地址"),m=(0,e.Uk)(" ："),h=(0,e.uE)('<p><img src="https://img.alicdn.com/tfs/TB1VIZ9ZEY1gK0jSZFCXXcwqXXa-1441-738.png" alt=""></p><p>默认情况下，<code>demo/</code> 目录里的文件都是扁平的，适合展示单个组件的文档，比如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>demo/\n├── simple.md                          \n├── size.md\n├── type.md\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>但是某些情况下，我们的业务组件可能会导出多个组件，此时可以通过目录嵌套来展示多个组件的文档：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>├── demo/                           \n│   ├── ComponentA/              \n│   │  ├── simple.md\n│   │  └── simple2.md\n│   ├── ComponentB/                \n│   │  ├── simple.md\n│   └──└── simple2.md\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>最终效果如下，其中每个目录对应一个组件，即左侧的一个导航：</p><p><img src="https://img.alicdn.com/tfs/TB1nQrZk5DsXe8jSZR0XXXK6FXa-1426-700.png" alt=""></p><h2 id="组件工程配置"><a class="header-anchor" href="#组件工程配置">#</a> 组件工程配置</h2><p>默认组件开发工程需要在 <code>build.json</code> 中引入 <code>build-plugin-component</code>：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&quot;build-plugin-component&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...options</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>插件支持的配置参数如下：</p><h3 id="alias-1-0-0"><a class="header-anchor" href="#alias-1-0-0">#</a> alias <code>&gt;1.0.0</code></h3><ul><li>类型：object</li><li>默认值：{}</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  &quot;alias&quot;: {\n    &quot;@&quot;: &quot;./src&quot;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="basiccomponents"><a class="header-anchor" href="#basiccomponents">#</a> basicComponents</h3><ul><li>类型： array</li><li>默认值：[]</li></ul><p>如果业务组件开发依赖了非 antd 或者 @alifd/next 的基础 UI 库，可以通过 basicComponents 进行设置，组件构建时将默认设置 babel-plugin-import 进行分包加载，并在生成的 <code>style.js</code> 中引入相应的样式资源。</p><h3 id="babelplugins"><a class="header-anchor" href="#babelplugins">#</a> babelPlugins</h3><ul><li>类型：array</li><li>默认值：[]</li></ul><p>业务组件通过 babel 进行编译时需要增加额外的 babel plugin 处理，可以通过 babelPlugins 进行设置。</p><p>通过配置 babel-plugin-add-module-exports 增加组件 default 的导出：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;babelPlugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&quot;babel-plugin-add-module-exports&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">&quot;addDefaultProperty&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;build-plugin-component&quot;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>注意 babelPlugins 仅影响 es/lib 目录构建产物，如需要修改 demo 预览时的 babel 配置，请通过 webpack-chain 形式进行自定义</p></blockquote><h3 id="babeloptions"><a class="header-anchor" href="#babeloptions">#</a> babelOptions</h3><ul><li>类型：array</li><li>默认值：[]</li></ul><p>比如修改 preset-env 的配置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;babelOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>注意 babelOptions 仅影响 es/lib 目录构建产物，如需要修改 demo 预览时的 babel 配置，请通过 webpack-chain 形式进行自定义</p></blockquote><h3 id="devserver"><a class="header-anchor" href="#devserver">#</a> devServer</h3><ul><li>类型：object</li><li>默认值：<code>{ hot: true, disableHostCheck: true, clientLogLevel: &#39;silent&#39; }</code></li></ul>',30),k=(0,e.Uk)("同 "),g={href:"https://webpack.js.org/configuration/dev-server/",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("webpack devServer 配置"),f=(0,e.Uk)("，自定义配置将会与默认配置合并。"),q=(0,e.uE)('<h3 id="filename"><a class="header-anchor" href="#filename">#</a> filename</h3><ul><li>类型： string</li><li>默认值：无</li></ul><p>如果打包 library 到 dist 目录，用来配置打包文件的名字。</p><h3 id="library"><a class="header-anchor" href="#library">#</a> library</h3><ul><li>类型： string</li><li>默认值：空</li></ul><p>如果打包 library 到 dist 目录，用来配置 library 名字。</p><h3 id="libraryexport"><a class="header-anchor" href="#libraryexport">#</a> libraryExport</h3><ul><li>类型： string</li><li>默认值：空</li></ul><p>如果打包 library 到 dist 目录，用来配置 library 出口配型，如可配置 default，对应的组件出口为 export default MyComponent。</p><h3 id="librarytarget"><a class="header-anchor" href="#librarytarget">#</a> libraryTarget</h3><ul><li>类型： string</li><li>默认值：空</li></ul><p>如果打包 library 到 dist 目录，用来配置 library 的类型，如 umd、amd 等。</p><h3 id="sourcemap"><a class="header-anchor" href="#sourcemap">#</a> sourceMap</h3><ul><li>类型： boolean</li><li>默认值：false</li></ul><p>如果打包 library 到 dist 目录，用来配置是否产出 sourceMap 文件。</p><h3 id="minify"><a class="header-anchor" href="#minify">#</a> minify</h3><ul><li>类型：boolean</li><li>默认：false</li></ul><p>如果打包 library 到 dist 目录，配置打包文件是否压缩。</p><h3 id="externals"><a class="header-anchor" href="#externals">#</a> externals</h3><ul><li>类型： plain object</li><li>默认值：</li></ul><p>如果打包 library 到 dist 目录，用来配置是否需要外部 externals，用来避免三方包被打包。</p><h3 id="subcomponents"><a class="header-anchor" href="#subcomponents">#</a> subComponents</h3><ul><li>类型：Boolean</li><li>默认值：false</li></ul><p>是否包含子组件，一般用于开发类似 fusion/antd 这种大包，开启该选项之后，会为每个组件生成对应的 <code>style.js</code> 文件。</p><h3 id="demotemplate"><a class="header-anchor" href="#demotemplate">#</a> demoTemplate</h3><ul><li>类型：array | string</li><li>默认值：<code>template-component-demo</code></li></ul><p>插件内置了 npm 包 <code>template-component-demo</code> 作为组件开发及构建时的 demo 预览，可以通过指定 <code>demoTemplate</code> 对进行自定义。</p><p>demo 预览组件默认接受如下参数：</p><ul><li><code>readmeData</code>：readme.md 文件中的解析数据</li><li><code>demoData</code>：demo 文件夹下 markdowm 内容解析的数据</li><li><code>env</code>：当前运行环境 <code>development|production</code></li><li><code>templateProps</code>：模版自定义参数，可以通过设置 <code>&quot;demoTemplate&quot;: [&quot;template-component-demo&quot;, { &quot;platform&quot;: &quot;h5&quot; }]</code> 的方式为模版定义参数</li></ul><h3 id="htmlinjection"><a class="header-anchor" href="#htmlinjection">#</a> htmlInjection</h3><ul><li>类型：object</li><li>默认值：<code>{}</code></li></ul><p>向 demo 预览的 html 里注入内容，比如插入一些静态脚本等：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  &quot;htmlInjection&quot;: {\n    &quot;headAppend&quot;: [\n      &quot;&lt;script src=&#39;http://foo.com/a.js&#39; /&gt;&quot;,\n      &quot;&lt;link href=&#39;http://foo.com/a.css&#39; /&gt;&quot;\n    ],\n    &quot;headPrepend&quot;: [],\n    &quot;bodyAppend&quot;: [],\n    &quot;bodyPrepend&quot;: [],\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="常见问题"><a class="header-anchor" href="#常见问题">#</a> 常见问题</h2><h3 id="打包-umd-文件"><a class="header-anchor" href="#打包-umd-文件">#</a> 打包 umd 文件</h3><p>通过 <code>npm run build</code> 构建组件，默认将生成 lib 和 es 两个目录，分别对应 CommonJS 模块规范和 es module 规范。通过设置工程上的 UMD 的相关配置，可以将业务组件以 UMD 模块方式打包，比如对上述示例组件进行设置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;library&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ExampleComponent&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;libraryTarget&quot;</span><span class="token operator">:</span> <span class="token string">&quot;umd&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;build-plugin-component&quot;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>构建结果将在 es 和 lib 目录的基础上，生成 dist 目录，包含标准的 umd 规范格式的 index.js 和 index.css。</p><h3 id="build-目录说明"><a class="header-anchor" href="#build-目录说明">#</a> build 目录说明</h3>',39),y=(0,e.Uk)("构建生成的 "),x=(0,e.Wm)("code",null,"build/index.html",-1),j=(0,e.Uk)(" 是将组件 demo 以及 README 构建到一个页面里，借助 unpkg 等服务可以作为组件的文档使用，"),E={href:"https://unpkg.alibaba-inc.com/browse/@icedesign/balloon-confirm@1.0.6/build/index.html",target:"_blank",rel:"noopener noreferrer"},C=(0,e.Uk)("示例"),w=(0,e.Uk)(" 。"),D=(0,e.uE)('<p>注意：构建 <code>build</code> 会加长 <code>npm run build</code> 的时间，如不需要可通过 <code>--skip-demo</code> 的命令行参数关闭。</p><h3 id="style-js-文件说明"><a class="header-anchor" href="#style-js-文件说明">#</a> style.js 文件说明</h3><p>为了解决组件的样式加载问题，同时为了隔离脚本和样式，因此针对组件自身以及依赖的样式我们会单独构建一个 style.js 的文件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@alifd/next/lib/form/style&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@alifd/next/lib/button/style&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@icedesign/balloon-confirm/lib/style&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./index.scss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>项目中我们通过内置插件会自动引入组件对应的 style.js，如果没有用 ICE 的工程工具则需要手动引入对应的 style.js 文件。</p>',5),U={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[l,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[p,(0,e.Wm)("a",t,[r,(0,e.Wm)(a)])])]),o,(0,e.Wm)("p",null,[c,i,u,(0,e.Wm)("a",b,[d,(0,e.Wm)(a)]),m]),h,(0,e.Wm)("p",null,[k,(0,e.Wm)("a",g,[v,(0,e.Wm)(a)]),f]),q,(0,e.Wm)("p",null,[y,x,j,(0,e.Wm)("a",E,[C,(0,e.Wm)(a)]),w]),D],64)}}}}]);