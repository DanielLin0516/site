(self.webpackChunksite=self.webpackChunksite||[]).push([[6171],{1606:(s,n,e)=>{"use strict";e.r(n),e.d(n,{data:()=>a});const a={key:"v-86bf01ea",path:"/guide/advanced/faas.html",title:"前后端一体化 Serverless",lang:"zh-CN",frontmatter:{title:"前后端一体化 Serverless",order:4},excerpt:"",headers:[{level:2,title:"应用创建",slug:"应用创建",children:[]},{level:2,title:"目录说明",slug:"目录说明",children:[]},{level:2,title:"编写函数",slug:"编写函数",children:[]},{level:2,title:"调用函数",slug:"调用函数",children:[]},{level:2,title:"函数部署",slug:"函数部署",children:[]},{level:2,title:"其他问题",slug:"其他问题",children:[{level:3,title:"函数是如何渲染 HTML 的？",slug:"函数是如何渲染-html-的",children:[]},{level:3,title:"如何开启 SSR？",slug:"如何开启-ssr",children:[]}]}],filePathRelative:"guide/advanced/faas.md",git:{updatedTime:1621352433e3,contributors:[]}}},8815:(s,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>b});var a=e(6252);const l=(0,a.Uk)("如果是阿里内部同学，请参考 "),p={href:"https://yuque.alibaba-inc.com/ice/rdy99p/ds1xv0",target:"_blank",rel:"noopener noreferrer"},r=(0,a.Uk)("文档"),c=(0,a.uE)('<hr><p>基于 ServerLess 的能力，在前端项目中可以完成 api 的编写以及页面的渲染，不需要再创建一个后端应用。</p><h2 id="应用创建"><a class="header-anchor" href="#应用创建">#</a> 应用创建</h2><p>使用 VS Code Iceworks 插件可视化创建：</p><p><img src="https://img.alicdn.com/tfs/TB1mWt5YuL2gK0jSZPhXXahvXXa-2049-970.png" alt=""></p><p>使用 CLI 创建：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">npm</span> init ice ice-app --template @icedesign/scaffold-midway-faas \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="目录说明"><a class="header-anchor" href="#目录说明">#</a> 目录说明</h2><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>├── src/\n│   ├── apis/                 \n│   └── app.ts\n├── build.json\n├── f.yml\n└── tsconfig.json\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>相比普通的前端项目新增了 <code>src/apis</code> 目录以及 <code>f.yml</code> 文件：</p><ul><li><code>f.yml</code>: serverless 相关配置</li><li><code>src/apis</code>：编写后端函数</li></ul><h2 id="编写函数"><a class="header-anchor" href="#编写函数">#</a> 编写函数</h2><p>在 <code>src/apis/lambda/</code> 目录新建 ts 文件即可编写函数：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/apis/lambda/index.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token string">&#39;Hello ICE &amp; Midway Serverless &amp; Aliyun!&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>函数运行在 Node.js 环境中，可以理解为一段服务端代码，可以实现数据处理、DB 读写、服务调用等能力。这里导出的函数即对应一个个 HTTP 接口，在前端代码中可直接调用。</p><blockquote><p>关于编写函数更完整的能力（比如获取 query 参数等）请参考 Midway 文档：https://www.yuque.com/midwayjs/faas/iwwlq2</p></blockquote><h2 id="调用函数"><a class="header-anchor" href="#调用函数">#</a> 调用函数</h2><p>函数编写完成后，即可在前端代码中调用：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>import React, { useState, useEffect } from &#39;react&#39;;\nimport { useRequest } from &#39;ice&#39;;\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import { hello } from &#39;@/apis/lambda&#39;;\n</span></span>\nexport default function Home() {\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const { data, loading, request } = useRequest(() =&gt; hello());\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> useEffect(() =&gt; {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    request();\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }, []);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return (\n</span><span class="token prefix unchanged"> </span><span class="token line">   &lt;&gt;请求函数结果：{ loading ? &#39;loading....&#39; : data?.message }&lt;/&gt;\n</span><span class="token prefix unchanged"> </span><span class="token line"> );\n</span></span>}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>相比于传统的 HTTP 调用，一体化项目可以直接通过 <code>import</code> 的方式调用函数，在前后端约定、类型提示、联调等方面有非常大的效率提升。</p><h2 id="函数部署"><a class="header-anchor" href="#函数部署">#</a> 函数部署</h2><p>完成函数开发之后，即可将整个应用（函数+静态资源）部署到云平台，这里以阿里云为例：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">npm</span> i -g @midwayjs/faas-cli --registry<span class="token operator">=</span>https://registry.npm.taobao.org\n$ f deploy --npm cnpm <span class="token comment"># 发布函数（包含前端静态资源）</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>f deploy</code> 需要填入一些信息：</p>',24),t=(0,a.Uk)("阿里云账号的 Access Key："),i={href:"https://ram.console.aliyun.com/manage/ak",target:"_blank",rel:"noopener noreferrer"},o=(0,a.Uk)("访问"),d=(0,a.Wm)("li",null,"提前开通阿里云的函数计算服务，有免费额度可以试用",-1),u=(0,a.Wm)("li",null,"更多：https://www.yuque.com/midwayjs/faas/deploy_aliyun_faq",-1),m=(0,a.uE)('<p>发布完成后，阿里云会提供一个临时域名用于访问站点，比如：http://30791687-1052730113742573.test.functioncompute.com/</p><h2 id="其他问题"><a class="header-anchor" href="#其他问题">#</a> 其他问题</h2><h3 id="函数是如何渲染-html-的"><a class="header-anchor" href="#函数是如何渲染-html-的">#</a> 函数是如何渲染 HTML 的？</h3><p><code>src/apis/render.ts</code> 即渲染 html 的函数</p><h3 id="如何开启-ssr"><a class="header-anchor" href="#如何开启-ssr">#</a> 如何开启 SSR？</h3><p>能力开发中……如果你很需要这个功能，欢迎通过 GitHub issue 反馈给我们，飞冰团队会根据需求度来加速该功能的开发。</p>',6),b={render:function(s,n){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[(0,a.Wm)("p",null,[l,(0,a.Wm)("a",p,[r,(0,a.Wm)(e)])]),c,(0,a.Wm)("ul",null,[(0,a.Wm)("li",null,[t,(0,a.Wm)("a",i,[o,(0,a.Wm)(e)])]),d,u]),m],64)}}}}]);